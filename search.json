[{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"getting-started-loading-relevant-ris-file-data-for-screening","dir":"Articles","previous_headings":"","what":"Getting started: Loading relevant ris file data for screening","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"stage, expect pile ris-files, containing titles abstract references like screen. can retrieve ris-files several ways, either directly research database, Google Scholar search, exported reference management tool, EndNote, Mendeley, RefMan. Alternatively, can export ris-file systematic software tool EPPI-reviewer, Covidence, MetaReviewer, revtools, whatever software use. example given , load ris-files extracted EPPI-reviewer. minor advantage extracting ris-files systematic software tools add unique study ID reference. feature makes easier keep track screening. Yet, ID can generated R well, automatically generated tabscreen_gpt() function unique IDs provided. using ChatGPT second screener, recommend human screening done uploading R. Thereby, possible compare screenings instantly computer screening done. example load ris-files separately excluded included ris-files, respectively, add human_code variable tracks human decision.","code":"# Installation # install.packages(\"devtools\") # devtools::install_github(\"MikkelVembye/AIscreenR\")  # Loading packages  library(AIscreenR) library(revtools) library(tibble) library(dplyr) library(purrr) library(usethis) library(future)   # Loading excluded studies # Reading path to risfiles excl_path <- system.file(\"extdata\", \"excl_tutorial.ris\", package = \"AIscreenR\")  ris_dat_excl <- revtools::read_bibliography(excl_path) |>    suppressWarnings() |>    as_tibble() |>   select(author, eppi_id, title, abstract) |> # Using only relevant variables   mutate(     human_code = 0   )  # Loading included studies incl_path <- system.file(\"extdata\", \"incl_tutorial.ris\", package = \"AIscreenR\")  ris_dat_incl <- revtools::read_bibliography(incl_path) |>    suppressWarnings() |>    as_tibble() |>   select(author, eppi_id, title, abstract) |>   mutate(     human_code = 1   )  filges2015_dat <-    bind_rows(ris_dat_excl, ris_dat_incl) |>    mutate(     studyid = 1:n()   ) |>    relocate(studyid, .after = eppi_id)   filges2015_dat #> # A tibble: 270 × 6 #>    author                              eppi_id studyid title abstract human_code #>    <chr>                               <chr>     <int> <chr> <chr>         <dbl> #>  1 Holloway R G and Gramling R and Ke… 9434957       1 Esti… \"Progno…          0 #>  2 Morawska Alina and Stallman Helen … 9433838       2 Self… \"Behavi…          0 #>  3 Michel C M and Pascual-Marqui R D … 9431171       3 Freq… \"The to…          0 #>  4 Paul Howard A                       9433968       4 A Re… \"The ar…          0 #>  5 Feinberg I and De Bie E and Davis … 9434460       5 Topo… \"STUDY …          0 #>  6 Hamburg Sam R                       9433554       6 BOOK… \"The ar…          0 #>  7 Park H Y and Lee B J and Kim J H a… 9435130       7 Rapi… \"Backgr…          0 #>  8 Petrek J                            9432040       8 Pict… \"AIMS: …          0 #>  9 Schwartzman Meredith P and Wahler … 9434093       9 Enha… \"New an…          0 #> 10 Faber J and Srutova L and Pilarova… 9431505      10 EEG … \"Sponta…          0"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"getting-api-key-openai","dir":"Articles","previous_headings":"","what":"Getting API key OpenAI","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"can use functions AIscreenR, must generate secret API key. must first ensure created account OpenAI (done stage, can sign ). account, go https://platform.openai.com/account/api-keys press + Create new secret key button (see picture ) give key name.     generate secret API key, remember store safely since able see . NOTE: lose API key, can just generate new one.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"temporary-solution","dir":"Articles","previous_headings":"Handling your API key","what":"Temporary solution","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"DONE","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"pemanent-solution","dir":"Articles","previous_headings":"Handling your API key","what":"Pemanent solution","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"add API key permanently environment variables, can execute usethis::edit_r_environ().     entering API key, save .Renviron document restart RStudio (ctrl + shift + F10).","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"retrieve-rate-limit-information","dir":"Articles","previous_headings":"","what":"Retrieve rate limit information","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"","code":"# Rate limits across one model (Default is \"gpt-3.5-turbo-0613\") rate_limits <- rate_limits_per_minute() rate_limits #> # A tibble: 1 × 3 #>   model              requests_per_minute tokens_per_minute #>   <chr>                            <dbl>             <dbl> #> 1 gpt-3.5-turbo-0613               10000           1000000   # Rate limits overview across multiple models # Add further models if necessary models <- c(\"gpt-3.5-turbo-0613\", \"gpt-4\")  models_rate_limits <- rate_limits_per_minute(model = models)  models_rate_limits #> # A tibble: 2 × 3 #>   model              requests_per_minute tokens_per_minute #>   <chr>                            <dbl>             <dbl> #> 1 gpt-3.5-turbo-0613               10000           1000000 #> 2 gpt-4                              200             10000"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"working-with-prompts-in-r","dir":"Articles","previous_headings":"","what":"Working with prompts in R","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"Example enter prompt. Can also done word   Figure 3 - Prompt 1: three inclusion critera.     Figure 4 - Prompt 2: one inclusion criterion .  ","code":"prompt <- \"Evaluate the following study based on the selection criteria for a systematic review on the effects of family-based interventions on drug  abuse reduction for young people in treatment for non-opioid drug use. A family-based intervention (FFT) is equivalent to a behavior focused family therapy, where young people’s drug use is understood in relation to  family behavior problems. Family-based interventions also includes manual-based  family therapies as it targets young people and their families as a system  throughout treatment, and thereby recognizes the important role of the family  system in the development and treatment of young people’s drug use problems.  FFT was developed in the late 1980s on request from the US National Institute on Drug Abuse (NIDA). The development of FFT was initially heavily inspired by the  alcohol abuse program Community Reinforcement Approach (CRA), which was aimed  at restructuring the environment to reinforce non-alcohol associated activities.  FFT developed to have more emphasis on contingency contracting, impulse control  strategies specific to drug use, and increased emphasis on involvement of family  members in treatment. FFT is designed to accommodate diverse populations of  youths with a variety of behavioral, cultural and individual preferences.  FFT has evolved for use in severe behavioral disturbances known to co-exist with substance use and dependence, and the core interventions have been enhanced to  address several mental health related problems commonly occurring as comorbid conditions in drug use treatment participant.  For each study, I would like you to assess:  1) Is the study about a family-based intervention, such as Functional Family Therapy, Multidimensional Family Therapy, or Behavioral Family Therapy? (Outpatient manual-based interventions of any duration delivered to young people and their families). If not, exclude study. 2) Are the participants in outpatient drug treatment primarily for non-opioid drug use? 3) Are the participants within age 11–21?\" word_path <-  system.file(\"extdata\", \"word_pormpt_1.docx\", package = \"AIscreenR\")  prompt1 <-    readtext::readtext(word_path)$text |>        stringr::str_remove_all(\"\\n\")  prompt1 #> [1] \"Evaluate the following study based on the selection criteria for a systematic review on the effects of family-based interventions on drug abuse reduction for young people in treatment for non-opioid drug use. A family-based intervention (FFT) is equivalent to a behavior focused family therapy, where young people’s drug use is understood in relation to family behavior problems. Family-based interventions also include manual-based family therapies as it target young people and their families as a system throughout treatment, and thereby recognize the important role of the family system in the development and treatment of young people’s drug use problems. FFT was developed in the late 1980s on request from the US National Institute on Drug Abuse (NIDA). The development of FFT was initially heavily inspired by the alcohol abuse program Community Reinforcement Approach (CRA), which was aimed at restructuring the environment to reinforce non-alcohol associated activities. FFT was developed to have more emphasis on contingency contracting, impulse control strategies specific to drug use, and increased emphasis on the involvement of family members in treatment. FFT is designed to accommodate diverse populations of youths with a variety of behavioral, cultural and individual preferences. FFT has evolved for use in severe behavioral disturbances known to co-exist with substance use and dependence, and the core interventions have been enhanced to address several mental health related problems commonly occurring as comorbid conditions in drug use treatment participant.  For each study, I would like you to assess:  1) Is the study about a family-based intervention, such as Functional Family Therapy, Multidimensional Family Therapy, or Behavioral Family Therapy? (Outpatient manual-based interventions of any duration delivered to young people and their families). If not, exclude study. 2) Are the participants in outpatient drug treatment primarily for non-opioid drug use? 3) Are the participants within age 11–21?\"  # Working with multiple prompts word_paths <- system.file(\"extdata\", c(\"word_pormpt_1.docx\", \"word_pormpt_2.docx\"), package = \"AIscreenR\")  prompts <-    purrr::map_chr(     word_paths, ~ {       readtext::readtext(.x)$text |>          stringr::str_remove_all(\"\\n\")     }    )  prompts  #> [1] \"Evaluate the following study based on the selection criteria for a systematic review on the effects of family-based interventions on drug abuse reduction for young people in treatment for non-opioid drug use. A family-based intervention (FFT) is equivalent to a behavior focused family therapy, where young people’s drug use is understood in relation to family behavior problems. Family-based interventions also include manual-based family therapies as it target young people and their families as a system throughout treatment, and thereby recognize the important role of the family system in the development and treatment of young people’s drug use problems. FFT was developed in the late 1980s on request from the US National Institute on Drug Abuse (NIDA). The development of FFT was initially heavily inspired by the alcohol abuse program Community Reinforcement Approach (CRA), which was aimed at restructuring the environment to reinforce non-alcohol associated activities. FFT was developed to have more emphasis on contingency contracting, impulse control strategies specific to drug use, and increased emphasis on the involvement of family members in treatment. FFT is designed to accommodate diverse populations of youths with a variety of behavioral, cultural and individual preferences. FFT has evolved for use in severe behavioral disturbances known to co-exist with substance use and dependence, and the core interventions have been enhanced to address several mental health related problems commonly occurring as comorbid conditions in drug use treatment participant.  For each study, I would like you to assess:  1) Is the study about a family-based intervention, such as Functional Family Therapy, Multidimensional Family Therapy, or Behavioral Family Therapy? (Outpatient manual-based interventions of any duration delivered to young people and their families). If not, exclude study. 2) Are the participants in outpatient drug treatment primarily for non-opioid drug use? 3) Are the participants within age 11–21?\" #> [2] \"Evaluate the following study based on the selection criteria for a systematic review on the effects of family-based interventions on drug abuse reduction for young people in treatment for non-opioid drug use. A family-based intervention (FFT) is equivalent to a behavior focused family therapy, where young people’s drug use is understood in relation to family behavior problems. Family-based interventions also include manual-based family therapies as it target young people and their families as a system throughout treatment, and thereby recognize the important role of the family system in the development and treatment of young people’s drug use problems. FFT was developed in the late 1980s on request from the US National Institute on Drug Abuse (NIDA). The development of FFT was initially heavily inspired by the alcohol abuse program Community Reinforcement Approach (CRA), which was aimed at restructuring the environment to reinforce non-alcohol associated activities. FFT was developed to have more emphasis on contingency contracting, impulse control strategies specific to drug use, and increased emphasis on the involvement of family members in treatment. FFT is designed to accommodate diverse populations of youths with a variety of behavioral, cultural and individual preferences. FFT has evolved for use in severe behavioral disturbances known to co-exist with substance use and dependence, and the core interventions have been enhanced to address several mental health related problems commonly occurring as comorbid conditions in drug use treatment participant.  For each study, I would like you to assess:  1) Is the study about a family-based intervention, such as Functional Family Therapy, Multidimensional Family Therapy, or Behavioral Family Therapy? (Outpatient manual-based interventions of any duration delivered to young people and their families). If not, exclude study. \""},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"approximate-price-of-screening","dir":"Articles","previous_headings":"","what":"Approximate price of screening","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"Approximate price screening","code":"models <- c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-0613\", \"gpt-4\") reps <- c(1, 10, 1)  app_obj <-    approximate_price_gpt(     data = filges2015_dat, # Tutorial data embedded in the package     prompt = prompts,      studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data     model = models,     reps = reps   )  app_obj #> The approximate price of the (simple) screening will be around $28.0678.  app_obj$price_dollar #> [1] 28.0678 app_obj$price_data #> # A tibble: 3 × 5 #>   model              iterations input_price_dollar output_price_dollar #>   <chr>                   <dbl>              <dbl>               <dbl> #> 1 gpt-3.5-turbo-0613          1             0.8892             0.01188 #> 2 gpt-3.5-turbo-0613         10             8.898              0.1188  #> 3 gpt-4                       1            17.79               0.3564  #>   total_price_dollor #>                <dbl> #> 1             0.9011 #> 2             9.017  #> 3            18.15"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"screening-titles-and-abstracts","dir":"Articles","previous_headings":"","what":"Screening titles and abstracts","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"","code":"models <- c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-0613\", \"gpt-4\") reps <- c(1, 10, 1) rpm <- c(10000, 10000, 200)  plan(multisession)  result_object <-    tabscreen_gpt(     data = filges2015_dat, # ris-file data create above      prompt = prompt, # indicate name of the loaded prompt object     studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data,     model = models,     reps = reps,     rpm = rpm   ) #> * The approximate price of the current (simple) screening will be around $28.0678. #> * Consider removing references that has no abstract since these can distort the accuracy of the screening #>  Progress: ──────────────────────────────────────────────────────────────────────────────────────────── 100% #>  * NOTE: Requests failed 4 times.\"  plan(sequential)  print(result_object) #> Find data with all answers by executing #>  result_object$answer_data_all #>  #> Find data with the result aggregated across multiple answers by executing #>  result_object$answer_data_sum #>  #> Find total price for the screening by executing #>  result_object$price_dollor #>  #> Find error data by executing #>  result_object$error_data"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"screen-failed-requests","dir":"Articles","previous_headings":"","what":"Screen failed requests","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"","code":"result_object <-    result_object |>    screen_errors()  print(result_object) #> Find data with all answers by executing #>  result_object$answer_data_all #>  #> Find data with the result aggregated across multiple answers by executing #>  result_object$answer_data_sum #>  #> Find total price for the screening by executing #>  result_object$price_dollor"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"getting-the-results-from-the-screening","dir":"Articles","previous_headings":"","what":"Getting the results from the screening","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"","code":"# gpt-3.5 results (prompt 1 - 10 replications) # studyid = 21 is not included since it failed during the loop # I show how to recover this in another  sum_dat_gpt3 <-    result_object$answer_data_sum |>    filter(stringr::str_detect(model, \"3\") & promptid == 1 & reps == 10)  # gpt-4 results (prompt 1) sum_dat_gpt4 <-    result_object$answer_data_sum |>    filter(stringr::str_detect(model, \"4\") & promptid == 1)"},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"simple-table","dir":"Articles","previous_headings":"Analyzing the screening","what":"Simple table","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"","code":"# gpt3.5 result table(gpt = sum_dat_gpt3$final_decision_gpt_num, human = sum_dat_gpt3$human_code) #>    human #> gpt  0  1 #>   0 82  4 #>   1  8 41 table(gpt = sum_dat_gpt4$final_decision_gpt_num, human = sum_dat_gpt4$human_code) #>    human #> gpt  0  1 #>   0 84  0 #>   1  6 45"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"false-included-and-excluded-by-gpt","dir":"Articles","previous_headings":"Analyzing the screening","what":"False included and excluded (by gpt)","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"","code":"screen_perform <-    result_object |>    screen_analyzer()   screen_perform #> # A tibble: 6 × 20 #>   promptid model          reps top_p n_screened n_missing n_refs human_in_gpt_ex #>      <int> <chr>         <int> <dbl>      <int>     <dbl>  <int>           <dbl> #> 1        1 gpt-3.5-turb…     1     1        135         0    135              11 #> 2        1 gpt-3.5-turb…    10     1        135         0    135               4 #> 3        1 gpt-4             1     1        135         0    135               0 #> 4        2 gpt-3.5-turb…     1     1        135         0    135              10 #> 5        2 gpt-3.5-turb…    10     1        135         0    135               7 #> 6        2 gpt-4             1     1        135         0    135               2 #>   human_ex_gpt_in human_in_gpt_in human_ex_gpt_ex accuracy p_agreement #>             <dbl>           <dbl>           <dbl>    <dbl>       <dbl> #> 1               8              34              82  0.1407       0.8593 #> 2               8              41              82  0.08889      0.9111 #> 3               6              45              84  0.04444      0.9556 #> 4               6              35              84  0.1185       0.8815 #> 5               7              38              83  0.1037       0.8963 #> 6               7              43              83  0.06667      0.9333 #>   sensitivity specificity    IRR   SE_IRR CL_IRR CU_IRR level_of_agreement #>         <dbl>       <dbl>  <dbl>    <dbl>  <dbl>  <dbl> <chr>              #> 1      0.7556      0.9111 0.6780 0.01308  0.6523 0.7036 Moderate           #> 2      0.9111      0.9111 0.8043 0.01113  0.7825 0.8262 Strong             #> 3      1           0.9333 0.9032 0.008146 0.8873 0.9192 Almost perfect     #> 4      0.7778      0.9333 0.7273 0.01209  0.7036 0.7510 Moderate           #> 5      0.8444      0.9222 0.7667 0.01166  0.7438 0.7895 Moderate           #> 6      0.9556      0.9222 0.8541 0.009807 0.8348 0.8733 Strong"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"getting-detailed-descriptions-will-become-a-separate-vignette","dir":"Articles","previous_headings":"","what":"Getting detailed descriptions [WILL BECOME A SEPARATE VIGNETTE]","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"","code":"# Show example with gpt-4"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-ChatGPT-For-Screening.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Using ChatGPT for Title and Abstract Screening in Systematic Reviews","text":"Gartlehner, G., Wagner, G., Lux, L. et al. (2019). Assessing accuracy machine-assisted abstract screening DistillerAI: user study. Systematic Reviews. 8, 1-10. https://doi.org/10.1186/s13643-019-1221-3 McHugh, M. L. (2012). Interrater reliability: kappa statistic. Biochemia Medica, 22(3), 276–282. Waffenschmidt, S., Knelangen, M., Sieben, W., Bühn, S., & Pieper, D. (2019). Single screening versus conventional double screening study selection systematic reviews: methodological systematic review. BMC Medical Research Methodology 19, 1-9. https://doi.org/10.1186/s12874-019-0782-0 Westgate MJ (2019). revtools: R package support article screening evidence synthesis. Research Synthesis Methods. https://doi.org/10.1002/jrsm.1374.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikkel H. Vembye. Author, maintainer.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vembye M (2023). AIscreenR: AI screening tools systematic reviews. R package version 0.0.0.9011, https://mikkelvembye.github.io/AIscreenR/.","code":"@Manual{,   title = {AIscreenR: AI screening tools for systematic reviews},   author = {Mikkel H. Vembye},   year = {2023},   note = {R package version 0.0.0.9011},   url = {https://mikkelvembye.github.io/AIscreenR/}, }"},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"aiscreenr-ai-screening-tools-in-r-for-systematic-reviewing","dir":"","previous_headings":"","what":"AI screening tools for systematic reviews","title":"AI screening tools for systematic reviews","text":"goal AIscreenR use AI tools support screening processes (including title abstract screening) systematic reviews related literature reviews.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"AI screening tools for systematic reviews","text":"can install development version AIscreenR GitHub : Setting API key checking rate limits load ris files. example downloaded ris files EPPI-Reviewer. Example enter prompt. Can also done word (see vignette). Approximate price screening Example conduct simple screening, getting return 1 reference included, 0 excluded, 1.1 firm decision reached.","code":"# install.packages(\"devtools\") devtools::install_github(\"MikkelVembye/AIscreenR\") # Find your api key at https://platform.openai.com/account/api-keys  # Thereafter, either encrypt it with the secret functions from the httr2 package # see https://httr2.r-lib.org/reference/secrets.html or run set_api_key()  # and then enter you key. library(AIscreenR) library(revtools) library(tibble) library(dplyr) library(future)  # Setting API set_api_key(AIscreenR:::testing_key_chatgpt())  # Obtain rate limits info (Default is \"gpt-3.5-turbo-0613\") rate_limits <- rate_limits_per_minute() rate_limits #> # A tibble: 1 × 3 #>   model              requests_per_minute tokens_per_minute #>   <chr>                            <dbl>             <dbl> #> 1 gpt-3.5-turbo-0613               10000           1000000  # Obtain rate limits info across multiple models rate_limits <- rate_limits_per_minute(model = c(\"gpt-3.5-turbo-0613\", \"gpt-4\")) rate_limits #> # A tibble: 2 × 3 #>   model              requests_per_minute tokens_per_minute #>   <chr>                            <dbl>             <dbl> #> 1 gpt-3.5-turbo-0613               10000           1000000 #> 2 gpt-4                              200             10000 # Loading ris file data via revtools ris_dat_excl <- revtools::read_bibliography(\"path/FFT_exclude.ris\") |>    suppressWarnings() |>    select(studyid = eppi_id, title, abstract) |>    as_tibble() |>    mutate(     human_code = 0 # Indicating exclusion   )  ris_dat_incl <- revtools::read_bibliography(\"path/FFT_include.ris\") |>    suppressWarnings() |>    select(studyid = eppi_id, title, abstract) |>    as_tibble() |>    mutate(     human_code = 1 # Indicating inclusion   )  filges2015_dat<- bind_rows(ris_dat_excl, ris_dat_incl) head(filges2015_dat, 10) #> # A tibble: 10 × 4 #>    studyid title                                             abstract human_code #>    <chr>   <chr>                                             <chr>         <dbl> #>  1 9434957 Estimating and communicating prognosis in advanc… \"Progno…          0 #>  2 9433838 Self-Directed Behavioral Family Intervention: Do… \"Behavi…          0 #>  3 9431171 Frequency domain source localization shows state… \"The to…          0 #>  4 9433968 A Review of: 'Kearney, C. A. (2010). Helping Chi… \"The ar…          0 #>  5 9434460 Topographic differences in the adolescent matura… \"STUDY …          0 #>  6 9433554 BOOK REVIEW                                       \"The ar…          0 #>  7 9435130 Rapid improvement of depression and quality of l… \"Backgr…          0 #>  8 9432040 Pictorial cognitive task solving and dynamics of… \"AIMS: …          0 #>  9 9434093 Enhancing the Impact of Parent Training Through … \"New an…          0 #> 10 9431505 EEG spectrum as information carrier               \"Sponta…          0 #> # A tibble: 10 × 6 #>    author                              eppi_id studyid title abstract human_code #>    <chr>                               <chr>     <int> <chr> <chr>         <dbl> #>  1 Holloway R G and Gramling R and Ke… 9434957       1 Esti… \"Progno…          0 #>  2 Morawska Alina and Stallman Helen … 9433838       2 Self… \"Behavi…          0 #>  3 Michel C M and Pascual-Marqui R D … 9431171       3 Freq… \"The to…          0 #>  4 Paul Howard A                       9433968       4 A Re… \"The ar…          0 #>  5 Feinberg I and De Bie E and Davis … 9434460       5 Topo… \"STUDY …          0 #>  6 Hamburg Sam R                       9433554       6 BOOK… \"The ar…          0 #>  7 Park H Y and Lee B J and Kim J H a… 9435130       7 Rapi… \"Backgr…          0 #>  8 Petrek J                            9432040       8 Pict… \"AIMS: …          0 #>  9 Schwartzman Meredith P and Wahler … 9434093       9 Enha… \"New an…          0 #> 10 Faber J and Srutova L and Pilarova… 9431505      10 EEG … \"Sponta…          0 prompt <- \"Evaluate the following study based on the selection criteria for a systematic review on the effects of family-based interventions on drug abuse reduction for young people in treatment for non-opioid drug use. A family-based intervention (FFT) is equivalent to a behavior focused family therapy, where young people’s drug use is understood in relation to family behavior problems. Family-based interventions also includes manual-based family therapies as it targets young people and their families as a system throughout treatment, and thereby recognizes the important role of the family system in the development and treatment of young people’s drug use problems. FFT was developed in the late 1980s on request from the US National Institute on Drug Abuse (NIDA). The development of FFT was initially heavily inspired by the alcohol abuse program Community Reinforcement Approach (CRA), which was aimed at restructuring the environment to reinforce non-alcohol associated activities. FFT developed to have more emphasis on contingency contracting, impulse control strategies specific to drug use, and increased emphasis on involvement of family members in treatment. FFT is designed to accommodate diverse populations of youths with a variety of behavioral, cultural and individual preferences. FFT has evolved for use in severe behavioral disturbances known to co-exist with substance use and dependence, and the core interventions have been enhanced to address several mental health related problems commonly occurring as comorbid conditions in drug use treatment participant.  For each study, I would like you to assess:  1) Is the study about a family-based intervention, such as Functional Family Therapy, Multidimensional Family Therapy, or Behavioral Family Therapy? (Outpatient manual-based interventions of any duration delivered to young people and their families). If not, exclude study. 2) Are the participants in outpatient drug treatment primarily for non-opioid drug use? 3) Are the participants within age 11–21?\" app_obj <-    approximate_price_gpt(     data = filges2015_dat,     prompt = prompt,     studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data     model = c(\"gpt-3.5-turbo-0613\"),     rep = 10    )  app_obj #> The approximate price of the (simple) screening will be around $4.477.  app_obj$price_dollar #> [1] 4.477 app_obj$price_data #> # A tibble: 1 × 5 #>   model     iterations input_price_dollar output_price_dollar total_price_dollor #>   <chr>          <dbl>              <dbl>               <dbl>              <dbl> #> 1 gpt-3.5-…         10               4.42              0.0594               4.48 # Subsetting the number of references to speed up the tutorial screening plan(multisession) test_obj <-    tabscreen_gpt(     data = filges2015_dat[c(140:150),],     prompt = prompt,      studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data     model = c(\"gpt-3.5-turbo-0613\"),     reps = 2 # Number of times the same question is asked to ChatGPT   )  #> * The approximate price of the current (simple) screening will be around $0.036. plan(sequential) test_obj #> Find data with all answers by executing #>  x$answer_data_all #>  #> Find data with the result aggregated across multiple answers by executing #>  x$answer_data_sum #>  #> Find total price for the screening by executing #>  x$price_dollor  # Data sets in object price_dat <- test_obj$price_dat price_dat #> # A tibble: 1 × 5 #>   model     iterations input_price_dollar output_price_dollar price_total_dollar #>   <chr>          <dbl>              <dbl>               <dbl>              <dbl> #> 1 gpt-3.5-…          2             0.0323             0.00048             0.0328   all_dat <- test_obj$answer_data_all all_dat |> select(human_code, decision_binary) #> # A tibble: 22 × 2 #>    human_code decision_binary #>         <dbl>           <dbl> #>  1          0               0 #>  2          0               0 #>  3          0               0 #>  4          0               0 #>  5          0               0 #>  6          0               0 #>  7          0               0 #>  8          0               0 #>  9          0               0 #> 10          0               0 #> # ℹ 12 more rows   sum_dat <- test_obj$answer_data_sum sum_dat |> select(human_code, final_decision_gpt:final_decision_gpt_num) #> # A tibble: 11 × 3 #>    human_code final_decision_gpt final_decision_gpt_num #>         <dbl> <chr>                               <dbl> #>  1          0 Exclude                                 0 #>  2          0 Exclude                                 0 #>  3          0 Exclude                                 0 #>  4          0 Exclude                                 0 #>  5          0 Exclude                                 0 #>  6          0 Exclude                                 0 #>  7          0 Exclude                                 0 #>  8          0 Exclude                                 0 #>  9          0 Exclude                                 0 #> 10          0 Exclude                                 0 #> 11          0 Exclude                                 0"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/AIscreenR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AIscreenR: AI screening tools for systematic reviews — AIscreenR-package","title":"AIscreenR: AI screening tools for systematic reviews — AIscreenR-package","text":"Screening AI tools including gpt models 'OpenAI'.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/AIscreenR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AIscreenR: AI screening tools for systematic reviews — AIscreenR-package","text":"Maintainer: Mikkel H. Vembye mikkel.vembye@gmail.com (ORCID)","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate price estimation for title and abstract screening using ChatGPT models — approximate_price_gpt","title":"Approximate price estimation for title and abstract screening using ChatGPT models — approximate_price_gpt","text":"function supports approximation price total title abstract screening ChatGPT. function provide approximately accurate pricing estimates screenings drawing function calling function incl_function_simple (Default) since detailed descriptions increase completion tokens unknown amount furthermore rather model sensitive gpt-4 models yielding longer detailed responses relative gpt-3.5-turbo models.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate price estimation for title and abstract screening using ChatGPT models — approximate_price_gpt","text":"","code":"approximate_price_gpt(   data,   prompt,   studyid,   title,   abstract,   model = \"gpt-3.5-turbo-0613\",   reps = 1,   top_p = 1,   token_word_ratio = 1.6 )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate price estimation for title and abstract screening using ChatGPT models — approximate_price_gpt","text":"data Dataset containing titles abstracts. prompt Prompt(s) paste title abstract. studyid Unique ID study. missing, generated automatically. title Name variable containing title information. abstract Name variable containing abstract information. model Character string name completion model. Can take multiple models, including gpt-4 models. Default = \"gpt-3.5-turbo-0613\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. reps Numerical value indicating number times question sent ChatGPT. can useful test consistency answers. Default 1 using 3.5 models, recommend setting value 10. top_p 'alternative sampling temperature, called nucleus sampling, model considers results tokens top_p probability mass. 0.1 means tokens comprising top 10% probability mass considered. generally recommend altering temperature .' (OPEN-AI). Default 1. Find documentation https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p. token_word_ratio multiplier used approximate number tokens per word. Default 1.6 empirically found average number tokens per word.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate price estimation for title and abstract screening using ChatGPT models — approximate_price_gpt","text":"object class \"gpt_price\". object list containing following components: price numerical value indicating total approximate price (USD) screening across gpt-models expected used screening. price_data dataset prices across gpt models expected used screening.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate price estimation for title and abstract screening using ChatGPT models — approximate_price_gpt","text":"","code":"prompt <- \"This is a prompt\"  app_price <- approximate_price_gpt(   data = filges2015_dat[1:2,],   prompt = prompt,   studyid = studyid,   title = title,   abstract = abstract,   model = c(\"gpt-3.5-turbo-0613\", \"gpt-4\"),   reps = c(10, 1) )  app_price #> The approximate price of the (simple) screening will be around $0.0674. app_price$price_dollar #> [1] 0.0674 app_price$price_data #> # A tibble: 2 × 5 #>   model     iterations input_price_dollar output_price_dollar total_price_dollor #>   <chr>          <dbl>              <dbl>               <dbl>              <dbl> #> 1 gpt-3.5-…         10             0.0219             0.00044             0.0223 #> 2 gpt-4              1             0.0438             0.00132             0.0451"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"Bibliometric toy data systematic review regarding Functional Family Therapy (FFT) Young People Treatment Non-opioid Drug Use (Filges et al., 2015). data includes 90 included 180 excluded randomly sampled references literature search systematic review.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"","code":"filges2015_dat"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"tibble 270 rows/studies 6 variables/columns","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"Filges, T., Andersen, D, & Jørgensen, -M. K (2015). Functional Family Therapy (FFT) Young People Treatment Non-opioid Drug Use: Systematic Review Campbell Systematic Reviews, doi:10.4073/csr.2015.14","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get API key from R environment variable. — get_api_key","title":"Get API key from R environment variable. — get_api_key","text":"Get API key R environment variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get API key from R environment variable. — get_api_key","text":"","code":"get_api_key(env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get API key from R environment variable. — get_api_key","text":"env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\". See set_api_key() set/create variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get API key from R environment variable. — get_api_key","text":"specified API key (NOTE: Avoid exposing console).","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get API key from R environment variable. — get_api_key","text":"get_api_key() can used executing set_api_key() adding api key permanently R environment using usethis::edit_r_environ(). write CHATGPT_KEY=[insert api key ] close .Renviron window restart R.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get API key from R environment variable. — get_api_key","text":"Find personal API key https://platform.openai.com/account/api-keys.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get API key from R environment variable. — get_api_key","text":"","code":"if (FALSE) { get_api_key() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a 'chatgpt' object — is_chatgpt","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"function returns TRUE chatgpt objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"","code":"is_chatgpt(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"TRUE object inherits chatgpt class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"function returns TRUE chatgpt_tbl objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"","code":"is_chatgpt_tbl(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"TRUE object inherits chatgpt_tbl class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for 'chatgpt' objects — print.chatgpt","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"Print methods 'chatgpt' objects","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"","code":"# S3 method for chatgpt print(x, ...)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"x object class 'chatgpt'. ... print arguments.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"Information find answer data sets pricing information.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"","code":"if (FALSE) { print(x) }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for 'gpt_price' objects — print.gpt_price","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"Print methods 'gpt_price' objects","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"","code":"# S3 method for gpt_price print(x, ...)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"x object class \"gpt_price\". ... print arguments.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"total price screening across gpt-models expected used screening.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"","code":"if (FALSE) { print(x) }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":null,"dir":"Reference","previous_headings":"","what":"Find updated rate limits for API models — rate_limits_per_minute","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"rate_limits_per_minute reports rate limits given api. function returns available requests per minute (RPM) well tokens per minute (TPM). Find general information https://platform.openai.com/docs/guides/rate-limits/overview.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"rate_limits_per_minute(   model = \"gpt-3.5-turbo-0613\",   AI_tool = \"chatgpt\",   api_key = get_api_key() )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"model Character string name completion model. Default = \"gpt-3.5-turbo-0613\". Can take multiple strings. Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. AI_tool Character string specifying AI tool api issued. Default \"chatgpt\". api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use secret_make_key(), secret_encrypt(), secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"tibble including variables information model used, number requests tokens per minute.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"if (FALSE) { set_api_key()  rate_limits_per_minute() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze performance between the human and AI screening. — screen_analyzer","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"human AI title abstract screening done, function allows calculate performance measures screening, including overall accuracy, specificity sensitivity screening, well interrater reliability kappa statistics.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"","code":"screen_analyzer(x, human_decision = human_code)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"x Either object class 'chatgpt' data set class 'chatgpt_tbl' human_decision Indicate variable data contains human_decision. variable must numeric containing 1 (included references) 0 (excluded references) .","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"tibble screening performance measures. tibble includes following variables:","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"Gartlehner, G., Wagner, G., Lux, L., Affengruber, L., Dobrescu, ., Kaminski-Hartenthaler, ., & Viswanathan, M. (2019). Assessing accuracy machine-assisted abstract screening DistillerAI: user study. Systematic Reviews, 8(1), 277. https://doi.org/10.1186/s13643-019-1221-3 McHugh, M. L. (2012). Interrater reliability: kappa statistic. Biochemia Medica, 22(3), 276-282. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3900052/","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"","code":"x <- AIscreenR:::result_object x |> screen_analyzer() |> print(width=220) #> # A tibble: 6 × 20 #>   promptid model          reps top_p n_screened n_missing n_refs human_in_gpt_ex #>      <int> <chr>         <int> <dbl>      <int>     <dbl>  <int>           <dbl> #> 1        1 gpt-3.5-turb…     1     1        135         0    135              11 #> 2        1 gpt-3.5-turb…    10     1        135         1    135               4 #> 3        1 gpt-4             1     1        134         1    135               0 #> 4        2 gpt-3.5-turb…     1     1        135         0    135              10 #> 5        2 gpt-3.5-turb…    10     1        135         0    135               7 #> 6        2 gpt-4             1     1        133         2    135               2 #>   human_ex_gpt_in human_in_gpt_in human_ex_gpt_ex accuracy p_agreement #>             <dbl>           <dbl>           <dbl>    <dbl>       <dbl> #> 1               8              34              82   0.141        0.859 #> 2               8              41              82   0.0889       0.911 #> 3               6              45              83   0.0444       0.956 #> 4               6              35              84   0.119        0.881 #> 5               7              38              83   0.104        0.896 #> 6               7              43              81   0.0667       0.933 #>   sensitivity specificity   IRR  SE_IRR CL_IRR CU_IRR level_of_agreement #>         <dbl>       <dbl> <dbl>   <dbl>  <dbl>  <dbl> <chr>              #> 1       0.756       0.911 0.678 0.0131   0.652  0.704 Moderate           #> 2       0.911       0.911 0.804 0.0111   0.783  0.826 Strong             #> 3       1           0.933 0.905 0.00831  0.889  0.921 Almost perfect     #> 4       0.778       0.933 0.727 0.0121   0.704  0.751 Moderate           #> 5       0.844       0.922 0.767 0.0117   0.744  0.790 Moderate           #> 6       0.956       0.920 0.860 0.0102   0.840  0.880 Strong"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-screen failed requests. — screen_errors","title":"Re-screen failed requests. — screen_errors","text":"function supports re-screening failed title abstract requests.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-screen failed requests. — screen_errors","text":"","code":"screen_errors(   object,   ...,   api_key = get_api_key(),   max_tries,   max_seconds,   is_transient,   backoff,   after )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-screen failed requests. — screen_errors","text":"object object class 'chatgpt'. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. used orginal screening (e.g., tabscreen_gpt()), argument(s) must specified . api_key Numerical value personal API key. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), req_perform() retry' (Wickham, 2023). missing, values max_tries max_seconds original screening (e.g., conducted tabscreen_gpt()) used. is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). missing, is_transient function original screening (e.g., conducted tabscreen_gpt()) used. backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). missing, backoffvalue original screening (e.g., conducted tabscreen_gpt()) used. 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). missing, value original screening (e.g., conducted tabscreen_gpt()) used.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-screen failed requests. — screen_errors","text":"Object class 'chatgpt' similar object returned tabscreen_gpt(). See documentation value tabscreen_gpt().","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Re-screen failed requests. — screen_errors","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-screen failed requests. — screen_errors","text":"","code":"if (FALSE) { prompt <- \"Is this study about a Functional Family Therapy (FFT) intervention?\"  obj_with_error <-   tabscreen_gpt(     data = filges2015_dat[1:2,],     prompt = prompt,     studyid = studyid,     title = title,     abstract = abstract,     model = c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-16k-0613\"),     max_tries = 1,     reps = 10     )  obj_rescreened <-   obj_with_error |>   screen_error()  # Alternatively re-set max_tries if errors still appear obj_rescreened <-   obj_with_error |>   screen_error(max_tries = 16) }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a temporary R environment API key variable — set_api_key","title":"Creating a temporary R environment API key variable — set_api_key","text":"function automatically sets/creates interim R environment variable API key call given AI model (e.g. ChatGPT). Thereby users avoid exposing API keys. API key set console, /can revealed via .Rhistory. Find information issue https://httr2.r-lib.org/articles/wrapping-apis.html.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"set_api_key(key, env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a temporary R environment API key variable — set_api_key","text":"key Character string (ideally encrypt) API key. See encrypt key : https://httr2.r-lib.org/articles/wrapping-apis.html#basics. provided, returns password box true API key can secretly entered. env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\".","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a temporary R environment API key variable — set_api_key","text":"temporary environment variable name env_var. key missing, returns password box true API key can entered.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating a temporary R environment API key variable — set_api_key","text":"set_api_key() successfully executed, get_api_key() automatically retrieves API key R environment users need specify API running functions package call API. API key can permanently set using usethis::edit_r_environ(). write CHATGPT_KEY=[insert api key ] close .Renviron window restart R.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Creating a temporary R environment API key variable — set_api_key","text":"Find personal API key https://platform.openai.com/account/api-keys.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"if (FALSE) { set_api_key() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"function supports conduct title abstract screening ChatGPT R. function allows run title abstract screening across multiple prompts repeated questions check consistency across answers. function draws newly developed function calling better steer output responses.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"","code":"tabscreen_gpt(   data,   prompt,   studyid,   title,   abstract,   ...,   model = \"gpt-3.5-turbo-0613\",   role = \"user\",   functions = incl_function_simple,   function_call_name = list(name = \"inclusion_decision_simple\"),   top_p = 1,   time_info = TRUE,   token_info = TRUE,   api_key = get_api_key(),   max_tries = 16,   max_seconds = NULL,   is_transient = gpt_is_transient,   backoff = NULL,   after = NULL,   rpm = 10000,   reps = 1,   seed = NULL,   progress = TRUE,   messages = TRUE,   incl_cutoff_upper = 0.5,   incl_cutoff_lower = incl_cutoff_upper - 0.1 )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"data Dataset containing titles abstracts. prompt Prompt(s) paste title abstract. studyid Unique ID study. missing, generated automatically. title Name variable containing title information. abstract Name variable containing abstract information. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. model Character string name completion model. Can take multiple models, including gpt-4 models. Default = \"gpt-3.5-turbo-0613\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. role Character string indicate role user. Default \"user\". functions Function steer output. Default incl_function_simple. get detailed responses use AIscreenR:::incl_function. Also see 'Examples . Find documentation function calling https://openai.com/blog/function-calling---api-updates. function_call_name Functions call. Default list(name = \"inclusion_decision_simple\"). get detailed responses use list(name = \"inclusion_decision\"). Also see 'Examples . top_p 'alternative sampling temperature, called nucleus sampling, model considers results tokens top_p probability mass. 0.1 means tokens comprising top 10% probability mass considered. generally recommend altering temperature .' (OPEN-AI). Default 1. Find documentation https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p. time_info Logical indicating whether run time request/question included data. Default = TRUE. token_info Logical indicating whether number prompt completion tokens per request included output data. Default = TRUE. TRUE, output object include price information conducted screening. api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use secret_make_key(), secret_encrypt(), secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), req_perform() retry' (Wickham, 2023). is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). rpm Numerical value indicating number requests per minute (rpm) available specified api key. Find information https://platform.openai.com/docs/guides/rate-limits/---rate-limits---api. Alternatively, use rate_limits_per_minute(). reps Numerical value indicating number times question sent ChatGPT. can useful test consistency answers. Default 1 using 3.5 models, recommend setting value 10. seed Numerical value seed ensure proper, parallel-safe random numbers produced. progress Logical indicating whether progress line shown running title abstract screening parallel. Default TRUE. messages Logical indicating whether print messages embedded function. Defualt TRUE. incl_cutoff_upper Numerical value indicating probability threshold studies included. Default 0.5, indicates titles abstracts ChatGPT included 50 percent times included. incl_cutoff_lower Numerical value indicating probability threshold studies check human. Default 0.4, means ask ChatGPT questions 10 times includes title abstract 4 times, suggest study check human.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"object class \"chatgpt\". object list containing following components: answer_data_sum dataset summerized, probalistic inclusion decision title abstract across multiple repeated questions. answer_data_all dataset individual answers. price numerical value indicating total price (USD) screening. price_data dataset prices across gpt models used screening.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"answer_data_sum data contains following mandatory variables: answer_data_all data contains following mandatory variables: requests failed reach server, chatgpt object contains error data set (error_data) variables answer_data_all failed request references . price_data data contains following variables: Find current token pricing https://openai.com/pricing.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"","code":"if (FALSE) {  set_api_key()  prompt <- \"Is this study about a Functional Family Therapy (FFT) intervention?\"  tabscreen_gpt(   data = filges2015_dat[1:2,],   prompt = prompt,   studyid = studyid,   title = title,   abstract = abstract,   model = c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-16k-0613\"),   max_tries = 1,   reps = 10   )   # Get detailed descriptions of the gpt decisions by using the  # embedded function calling functions from the package. See example below.  tabscreen_gpt(    data = filges2015_dat[1:2,],    prompt = prompt,    studyid = studyid,    title = title,    abstract = abstract,    functions = AIscreenR:::incl_function,    function_call_name = list(name = \"inclusion_decision\"),    max_tries = 1,    reps = 2  ) }"},{"path":"https://mikkelvembye.github.io/AIscreenR/news/index.html","id":"aiscreenr-0009011","dir":"Changelog","previous_headings":"","what":"AIscreenR 0.0.0.9011","title":"AIscreenR 0.0.0.9011","text":"First devel version","code":""}]
