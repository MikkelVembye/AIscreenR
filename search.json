[{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"getting-started-loading-relevant-ris-file-data-for-screening","dir":"Articles","previous_headings":"","what":"Getting started: Loading relevant ris file data for screening","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"stage, expect pile ris-files, containing titles abstracts references like screen. can retrieve ris-files several ways, either directly research database, Google Scholar search, exported reference management tool, EndNote, Mendeley, RefMan. Alternatively, can export ris-file systematic software tool EPPI-reviewer, Covidence, MetaReviewer, revtools, whatever software use. example given , load ris-files extracted EPPI-reviewer. minor advantage extracting ris-files systematic software tools add unique study ID reference. feature makes easier keep track screening. Yet, IDs automatically generated tabscreen_gpt() function unique IDs missing. using GPT API model second screener, recommend human screening done uploading ris-file(s) R. Thereby, possible compare screenings instantly computer screening done. example load ris-files separately excluded included ris-files, respectively, add human_code variable track human decision.","code":"# Loading packages  library(AIscreenR) # Used to screen and calculate gpt vs. human performance library(revtools)  # Used to load ris-files library(tibble)    # Used to work with tibbles library(dplyr)     # Used to work with tibbles library(purrr) library(usethis) library(future)    # Used to conduct screenings in parallel # Reading path to risfiles excl_path <- system.file(\"extdata\", \"excl_tutorial.ris\", package = \"AIscreenR\")  # Loading EXCLUDED studies ris_dat_excl <- revtools::read_bibliography(excl_path) |>    suppressWarnings() |>    as_tibble() |>   select(author, eppi_id, title, abstract) |> # Using only relevant variables   mutate(     human_code = 0,     across(c(author, title, abstract), ~ na_if(., \"NA\"))   )  # Loading INCLUDED studies incl_path <- system.file(\"extdata\", \"incl_tutorial.ris\", package = \"AIscreenR\")  ris_dat_incl <- revtools::read_bibliography(incl_path) |>    suppressWarnings() |>    as_tibble() |>   select(author, eppi_id, title, abstract) |>   mutate(     human_code = 1,     across(c(author, title, abstract), ~ na_if(., \"NA\"))   )  filges2015_dat <-    bind_rows(ris_dat_excl, ris_dat_incl) |>    mutate(     studyid = 1:n()   ) |>    relocate(studyid, .after = eppi_id)   filges2015_dat #> # A tibble: 270 × 6 #>   author                       eppi_id studyid title abstract human_code #>   <chr>                        <chr>     <int> <chr> <chr>         <dbl> #> 1 Holloway R G and Gramling R… 9434957       1 Esti… \"Progno…          0 #> 2 Morawska Alina and Stallman… 9433838       2 Self… \"Behavi…          0 #> 3 Michel C M and Pascual-Marq… 9431171       3 Freq… \"The to…          0 #> 4 Paul Howard A                9433968       4 A Re… \"The ar…          0 #> 5 Feinberg I and De Bie E and… 9434460       5 Topo… \"STUDY …          0 #> 6 Hamburg Sam R                9433554       6 BOOK… \"The ar…          0 #> 7 Park H Y and Lee B J and Ki… 9435130       7 Rapi… \"Backgr…          0 #> 8 Petrek J                     9432040       8 Pict… \"AIMS: …          0 #> 9 Schwartzman Meredith P and … 9434093       9 Enha… \"New an…          0 #>10 Faber J and Srutova L and P… 9431505      10 EEG … \"Sponta…          0 #># ℹ 260 more rows #># ℹ Use `print(n = ...)` to see more rows"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"getting-api-key-openai","dir":"Articles","previous_headings":"","what":"Getting API key (OpenAI)","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"can use AIscreenR screen references, must generate secret API key OpenAI. must first ensure created account OpenAI (done stage, can sign ). account, go https://platform.openai.com/account/api-keys press + Create new secret key button (see Figure 1 ) give key name.   Figure 1 - Generate API key OpenAI   generated secret API key, remember store safely since able see . NOTE: lose API key, can just generate new one.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"handling-your-api-key","dir":"Articles","previous_headings":"","what":"Handling your API key","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"retrieved API, theory add directly AIscreenR functions via api_key argument. Yet, improper way work API key since easily compromise secret key. example, API key disclosed sharing codes others, gives access draw OpenAI account. Furthermore, OpenAI cancel API key recognize API key compromised (e.g., push public GitHub page). overcome issue several options . can either work call permanent temporary solutions.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"permanent-solution","dir":"Articles","previous_headings":"Handling your API key","what":"Permanent solution","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"easiest way work API key permanently add R environment environment variable. can achieved usethis::edit_r_environ(). .Renviron file, write CHATGPT_KEY=your_key depicted Figure 2. entering API key, close save .Renviron file restart RStudio (ctrl + shift + F10). now , AIscreenR functions use get_api_key() function retrieve API key R environment automatically. using approach don’t worry API key (unless update RStudio, deliberately delete key, get new computer. must repeat process).   Figure 2 - R environment file  ","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"temporary-solution","dir":"Articles","previous_headings":"Handling your API key","what":"Temporary solution","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"want add API key permanently R environment, can use set_api_key(). executing set_api_key(), see pop-window can enter API key. add API key temporary environment variable. Consequently, restart RStudio, longer able find API key R environment. Alternatively, can pass decrypted key set_api_key(), like set_api_key(key = secret_decrypt(encrypt_key, \"YOUR_SECRET_KEY_FOR_DECRYTING\")). See HTTR2 package details solution.   Figure 3 - Set API key  ","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"working-with-prompts-in-r","dir":"Articles","previous_headings":"","what":"Working with prompts in R","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"Example enter prompt. Can also done word   Figure 4 - Prompt 1: three inclusion critera.     Figure 5 - Prompt 2: one inclusion criterion .  ","code":"prompt <- \"Evaluate the following study based on the selection criteria for a systematic review on the effects of family-based interventions on drug  abuse reduction for young people in treatment for non-opioid drug use. A family-based intervention (FFT) is equivalent to a behavior focused family therapy, where young people’s drug use is understood in relation to  family behavior problems. Family-based interventions also includes manual-based  family therapies as it targets young people and their families as a system  throughout treatment, and thereby recognizes the important role of the family  system in the development and treatment of young people’s drug use problems.  FFT was developed in the late 1980s on request from the US National Institute on Drug Abuse (NIDA). The development of FFT was initially heavily inspired by the  alcohol abuse program Community Reinforcement Approach (CRA), which was aimed  at restructuring the environment to reinforce non-alcohol associated activities.  FFT developed to have more emphasis on contingency contracting, impulse control  strategies specific to drug use, and increased emphasis on involvement of family  members in treatment. FFT is designed to accommodate diverse populations of  youths with a variety of behavioral, cultural and individual preferences.  FFT has evolved for use in severe behavioral disturbances known to co-exist with substance use and dependence, and the core interventions have been enhanced to  address several mental health related problems commonly occurring as comorbid conditions in drug use treatment participant.  For each study, I would like you to assess:  1) Is the study about a family-based intervention, such as Functional Family Therapy, Multidimensional Family Therapy, or Behavioral Family Therapy? (Outpatient manual-based interventions of any duration delivered to young people and their families). If not, exclude study. 2) Are the participants in outpatient drug treatment primarily for non-opioid drug use? 3) Are the participants within age 11–21?\" word_path <-  system.file(\"extdata\", \"word_prompt_1.docx\", package = \"AIscreenR\")  prompt1 <-    readtext::readtext(word_path)$text |>        stringr::str_remove_all(\"\\n\")  prompt1  # Working with multiple prompts word_paths <- system.file(\"extdata\", c(\"word_prompt_1.docx\", \"word_prompt_2.docx\"), package = \"AIscreenR\")  prompts <-    purrr::map_chr(     word_paths, ~ {       readtext::readtext(.x)$text |>          stringr::str_remove_all(\"\\n\")     }    )  prompts"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"retrieve-rate-limit-information","dir":"Articles","previous_headings":"","what":"Retrieve rate limit information","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"","code":"# Rate limits across one model (Default is \"gpt-3.5-turbo-0613\") rate_limits <- rate_limits_per_minute() rate_limits #> # A tibble: 1 × 3 #>   model              requests_per_minute tokens_per_minute #>   <chr>                            <dbl>             <dbl> #> 1 gpt-3.5-turbo-0613               10000           1000000   # Rate limits overview across multiple models # Add further models if necessary models <- c(\"gpt-3.5-turbo-0613\", \"gpt-4\")  models_rate_limits <- rate_limits_per_minute(model = models)  models_rate_limits #> # A tibble: 2 × 3 #>   model              requests_per_minute tokens_per_minute #>   <chr>                            <dbl>             <dbl> #> 1 gpt-3.5-turbo-0613               10000           1000000 #> 2 gpt-4                              200             10000"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"approximate-price-of-screening","dir":"Articles","previous_headings":"","what":"Approximate price of screening","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"Approximate price screening","code":"app_obj <-    approximate_price_gpt(     data = filges2015_dat, # Tutorial data embedded in the package     prompt = prompts,      studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data     model = c(\"gpt-4o\", \"gpt-4\"),     reps = 1   )  app_obj #> The approximate price of the (simple) screening will be around $3.0573.  app_obj$price_dollar #> [1] 3.0573 app_obj$price_data"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"screening-titles-and-abstracts","dir":"Articles","previous_headings":"","what":"Screening titles and abstracts","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"","code":"models <- c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-0613\", \"gpt-4\") reps <- c(1, 10, 1) rpm <- c(10000, 10000, 200)  plan(multisession)  result_object <-    tabscreen_gpt.original(     data = filges2015_dat, # ris-file data create above      prompt = prompt, # indicate name of the loaded prompt object     studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data,     model = c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-0613\", \"gpt-4\"),     reps = c(1, 10, 1),     rpm = c(10000, 10000, 200),     top_p = c(0.001, 1)   ) #> * The approximate price of the current (simple) screening will be around $27.9901. #> * Consider removing references that has no abstract since these can distort the accuracy of the screening #>  Progress: ──────────────────────────────────────────────────────────────────────────────────────────── 100% #>  * NOTE: Requests failed 4 times.\"  plan(sequential)  print(result_object) #> Find data with all answers by executing #>  result_object$answer_data_all #>  #> Find data with the result aggregated across multiple answers by executing #>  result_object$answer_data_sum #>  #> Find total price for the screening by executing #>  result_object$price_dollar #>  #> Find error data by executing #>  result_object$error_data"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"screen-failed-requests","dir":"Articles","previous_headings":"","what":"Screen failed requests","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"","code":"result_object <-    result_object |>    screen_errors()  print(result_object) #> Find data with all answers by executing #>  result_object$answer_data_all #>  #> Find data with the result aggregated across multiple answers by executing #>  result_object$answer_data_sum #>  #> Find total price for the screening by executing #>  result_object$price_dollar"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"getting-the-results-from-the-screening","dir":"Articles","previous_headings":"","what":"Getting the results from the screening","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"","code":"# gpt-3.5 results (prompt 1, top_p = 1, 10 replications) # studyid = 21 is not included since it failed during the loop # I show how to recover this in another  sum_dat_gpt3 <-    result_object$answer_data_sum |>    filter(stringr::str_detect(model, \"3\") & promptid == 1 & reps == 10 & top_p == 1)  # gpt-4 results (prompt 1, top_p = 1) sum_dat_gpt4 <-    result_object$answer_data_sum |>    filter(stringr::str_detect(model, \"4\") & promptid == 1 & top_p == 1)"},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"simple-table","dir":"Articles","previous_headings":"Analyzing the screening","what":"Simple table","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"","code":"# gpt3.5 result table(gpt = sum_dat_gpt3$final_decision_gpt_num, human = sum_dat_gpt3$human_code) table(gpt = sum_dat_gpt4$final_decision_gpt_num, human = sum_dat_gpt4$human_code)"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"false-included-and-excluded-by-gpt","dir":"Articles","previous_headings":"Analyzing the screening","what":"False included and excluded (by gpt)","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"","code":"screen_perform <-    result_object |>    screen_analyzer()   screen_perform"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"getting-detailed-descriptions","dir":"Articles","previous_headings":"","what":"Getting detailed descriptions","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"","code":"# Show example with gpt-4"},{"path":"https://mikkelvembye.github.io/AIscreenR/articles/Using-GPT-API-Models-For-Screening.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Using OpenAI's GPT API models for Title and Abstract Screening in Systematic Reviews","text":"Alshami, ., Elsayed, M., Ali, E., Eltoukhy, . E. E., & Zayed, T. (2023). Harnessing power ChatGPT automating systematic review process: Methodology, case study, limitations, future directions. Systems. 11(7). Gargari, O. K., Mahmoudi, M. H., Hajisafarali, M., & Samiee, R. (2024). Enhancing title abstract screening systematic reviews GPT-3.5 turbo. BMJ Evidence-Based Medicine, 29(1), 69 LP – 70. https://doi.org/10.1136/bmjebm-2023-112678 Guo, E., Gupta, M., Deng, J., Park, Y.-J., Paget, M., & Naugler, C. (2024). Automated Paper Screening Clinical Reviews Using Large Language Models: Data Analysis Study. Journal Medical Internet Research. https://doi.org/10.2196/48996 Issaiy, M., Ghanaati, H., Kolahi, S., Shakiba, M., Jalali, . H., Zarei, D., Kazemian, S., Avanaki, M. ., & Firouznia, K. (2024). Methodological insights ChatGPT’s screening performance systematic reviews. BMC Medical Research Methodology, 24(1), 78. https://doi.org/10.1186/s12874-024-02203-8 Khraisha Q, Put S, Kappenberg J, Warraitch , Hadfield K (2024). Can large language models replace humans systematic reviews? Evaluating GPT-4’s efficacy screening extracting data peer-reviewed grey literature multiple languages. Research Synthesis Methods. 1-11. https://doi.org/10.1002/jrsm.1715 Syriani, E., David, ., & Kumar, G. (2023). Assessing Ability ChatGPT Screen Articles Systematic Reviews. ArXiv Preprint ArXiv:2307.06464. http://arxiv.org/pdf/2307.06464 Vembye, M., Christensen, J., Mølgaard, . B., Schytt, F.L.W. (2024). GPT API Models Can Function Highly Reliable Second Screeners Titles Abstracts Systematic Reviews: Proof Concept Common Guidelines. Open Science Framework (OSF). https://doi.org/10.31219/osf.io/yrhzm Westgate MJ (2019). revtools: R package support article screening evidence synthesis. Research Synthesis Methods. https://doi.org/10.1002/jrsm.1374.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikkel H. Vembye. Author, maintainer.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vembye M (2024). AIscreenR: AI Screening Tools Systematic Reviews. R package version 0.0.0.9999, https://mikkelvembye.github.io/AIscreenR/.","code":"@Manual{,   title = {AIscreenR: AI Screening Tools for Systematic Reviews},   author = {Mikkel H. Vembye},   year = {2024},   note = {R package version 0.0.0.9999},   url = {https://mikkelvembye.github.io/AIscreenR/}, }"},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"aiscreenr-ai-screening-tools-in-r-for-systematic-reviewing","dir":"","previous_headings":"","what":"AI Screening Tools for Systematic Reviews","title":"AI Screening Tools for Systematic Reviews","text":"goal AIscreenR use AI tools support screening processes (including title abstract screening) systematic reviews related literature reviews. current stage, main aim AIscreenR package support use testing OpenAI’s GPT API models second screeners titles abstracts alternatively reduce research waste, .e., number references needed screened humans. package allows user apply OpenAI’s GPT API models https://api.openai.com/v1/chat/completions endpoint. future developments, expect add LLMs APIs become available models, example Claude 2. now, invite researchers test software review community can get better understanding performance OpenAI’s GPT API models.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"AI Screening Tools for Systematic Reviews","text":"can install development version AIscreenR GitHub : Setting API key checking rate limits load ris files. example downloaded ris files EPPI-Reviewer. Example enter prompt. Can also done word (see vignette). Approximate price screening running screening. Example conduct simple screening, returning 1 reference included, 0 excluded, 1.1 uncertain.","code":"# install.packages(\"devtools\") devtools::install_github(\"MikkelVembye/AIscreenR\") # Find your api key at https://platform.openai.com/account/api-keys  # Thereafter, either encrypt it with the secret functions from the httr2 package # see https://httr2.r-lib.org/reference/secrets.html or run set_api_key()  # and then enter you key. library(AIscreenR) library(revtools) library(tibble) library(dplyr) library(future)  # Setting API set_api_key(AIscreenR:::testing_key_chatgpt())  # Obtain rate limits info (Default is \"gpt-4\") rate_limits <- rate_limits_per_minute() rate_limits #> # A tibble: 1 × 3 #>   model requests_per_minute tokens_per_minute #>   <chr>               <dbl>             <dbl> #> 1 gpt-4               10000           1000000  # Obtain rate limits info across multiple models rate_limits <- rate_limits_per_minute(model = \"gpt-4o-mini\") rate_limits #> # A tibble: 1 × 3 #>   model       requests_per_minute tokens_per_minute #>   <chr>                     <dbl>             <dbl> #> 1 gpt-4o-mini               30000         150000000 # Loading ris file data via revtools ris_dat_excl <- revtools::read_bibliography(\"path/FFT_exclude.ris\") |>    suppressWarnings() |>    select(studyid = eppi_id, title, abstract) |>    as_tibble() |>    mutate(     human_code = 0 # Indicating exclusion   )  ris_dat_incl <- revtools::read_bibliography(\"path/FFT_include.ris\") |>    suppressWarnings() |>    select(studyid = eppi_id, title, abstract) |>    as_tibble() |>    mutate(     human_code = 1 # Indicating inclusion   )  filges2015_dat<- bind_rows(ris_dat_excl, ris_dat_incl) head(filges2015_dat, 10) #> # A tibble: 10 × 4 #>    studyid title                                             abstract human_code #>    <chr>   <chr>                                             <chr>         <dbl> #>  1 9434957 Estimating and communicating prognosis in advanc… \"Progno…          0 #>  2 9433838 Self-Directed Behavioral Family Intervention: Do… \"Behavi…          0 #>  3 9431171 Frequency domain source localization shows state… \"The to…          0 #>  4 9433968 A Review of: 'Kearney, C. A. (2010). Helping Chi… \"The ar…          0 #>  5 9434460 Topographic differences in the adolescent matura… \"STUDY …          0 #>  6 9433554 BOOK REVIEW                                       \"The ar…          0 #>  7 9435130 Rapid improvement of depression and quality of l… \"Backgr…          0 #>  8 9432040 Pictorial cognitive task solving and dynamics of… \"AIMS: …          0 #>  9 9434093 Enhancing the Impact of Parent Training Through … \"New an…          0 #> 10 9431505 EEG spectrum as information carrier               \"Sponta…          0 prompt <- \"Evaluate the following study based on the selection criteria for a systematic review on the effects of family-based interventions on drug abuse reduction for young people in treatment for non-opioid drug use. A family-based intervention (FFT) is equivalent to a behavior focused family therapy, where young people’s drug use is understood in relation to family behavior problems. Family-based interventions also includes manual-based family therapies as it targets young people and their families as a system throughout treatment, and thereby recognizes the important role of the family system in the development and treatment of young people’s drug use problems. FFT was developed in the late 1980s on request from the US National Institute on Drug Abuse (NIDA). The development of FFT was initially heavily inspired by the alcohol abuse program Community Reinforcement Approach (CRA), which was aimed at restructuring the environment to reinforce non-alcohol associated activities. FFT developed to have more emphasis on contingency contracting, impulse control strategies specific to drug use, and increased emphasis on involvement of family members in treatment. FFT is designed to accommodate diverse populations of youths with a variety of behavioral, cultural and individual preferences. FFT has evolved for use in severe behavioral disturbances known to co-exist with substance use and dependence, and the core interventions have been enhanced to address several mental health related problems commonly occurring as comorbid conditions in drug use treatment participant.  For each study, I would like you to assess:  1) Is the study about a family-based intervention, such as Functional Family Therapy, Multidimensional Family Therapy, or Behavioral Family Therapy? (Outpatient manual-based interventions of any duration delivered to young people and their families). If not, exclude study. 2) Are the participants in outpatient drug treatment primarily for non-opioid drug use? 3) Are the participants within age 11–21?\" app_obj <-    approximate_price_gpt(     data = filges2015_dat,     prompt = prompt,     studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data     model = \"gpt-4o-mini\",     rep = 1    )  app_obj #> The approximate price of the (simple) screening will be around $0.0476.  app_obj$price_dollar #> [1] 0.0476 app_obj$price_data #> # A tibble: 1 × 6 #>   prompt   model       iterations input_price_dollar output_price_dollar #>   <chr>    <chr>            <dbl>              <dbl>               <dbl> #> 1 Prompt 1 gpt-4o-mini          1             0.0458             0.00178 #> # ℹ 1 more variable: total_price_dollar <dbl> # Subsetting the number of references to speed up the tutorial screening plan(multisession) test_obj <-    tabscreen_gpt(     data = filges2015_dat[c(1:5, 266:270),],     prompt = prompt,      studyid = studyid, # indicate the variable with the studyid in the data     title = title, # indicate the variable with the titles in the data     abstract = abstract, # indicate the variable with the abstracts in the data     model = \"gpt-4o-mini\",     reps = 1 # Number of times the same question is asked to ChatGPT   )  #> * The approximate price of the current (simple) screening will be around $0.0017. #> * Consider removing references that has no abstract since these can distort the accuracy of the screening. plan(sequential) test_obj #>  #> Find the final result dataset via result_object$answer_data  # Data sets in object price_dat <- test_obj$price_data price_dat #> # A tibble: 1 × 6 #>   prompt model       iterations input_price_dollar output_price_dollar #>    <int> <chr>            <dbl>              <dbl>               <dbl> #> 1      1 gpt-4o-mini          1             0.0016           0.0000432 #> # ℹ 1 more variable: total_price_dollar <dbl>  all_dat <- test_obj$answer_data all_dat |> select(human_code, decision_binary) #> # A tibble: 10 × 2 #>    human_code decision_binary #>         <dbl>           <dbl> #>  1          0               0 #>  2          0               0 #>  3          0               0 #>  4          0               0 #>  5          0               0 #>  6          1               0 #>  7          1               1 #>  8          1               0 #>  9          1               1 #> 10          1               1"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/AIscreenR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AIscreenR: AI Screening Tools for Systematic Reviews — AIscreenR-package","title":"AIscreenR: AI Screening Tools for Systematic Reviews — AIscreenR-package","text":"Screening AI tools, including title abstract screening GPT API models 'OpenAI'.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/AIscreenR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AIscreenR: AI Screening Tools for Systematic Reviews — AIscreenR-package","text":"Maintainer: Mikkel H. Vembye mikkel.vembye@gmail.com (ORCID)","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate price estimation for title and abstract screening using OpenAI's GPT API models — approximate_price_gpt","title":"Approximate price estimation for title and abstract screening using OpenAI's GPT API models — approximate_price_gpt","text":"function supports approximation price total title abstract screening OpenAI's GPT API models. function provide approximately accurate pricing estimates screenings drawing function calling function incl_function_simple (Default) since detailed descriptions increase completion tokens unknown amount furthermore rather model sensitive gpt-4 models yielding longer detailed responses relative gpt-3.5-turbo models.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate price estimation for title and abstract screening using OpenAI's GPT API models — approximate_price_gpt","text":"","code":"approximate_price_gpt(   data,   prompt,   studyid,   title,   abstract,   model = \"gpt-3.5-turbo-0613\",   reps = 1,   top_p = 1,   token_word_ratio = 1.6 )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate price estimation for title and abstract screening using OpenAI's GPT API models — approximate_price_gpt","text":"data Dataset containing titles abstracts. prompt Prompt(s) paste title abstract. studyid Unique ID study. missing, generated automatically. title Name variable containing title information. abstract Name variable containing abstract information. model Character string name completion model. Can take multiple models, including gpt-4 models. Default = \"gpt-3.5-turbo-0613\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. reps Numerical value indicating number times question sent ChatGPT. can useful test consistency answers. Default 1 using 3.5 models, recommend setting value 10. top_p 'alternative sampling temperature, called nucleus sampling, model considers results tokens top_p probability mass. 0.1 means tokens comprising top 10% probability mass considered. generally recommend altering temperature .' (OPEN-AI). Default 1. Find documentation https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p. token_word_ratio multiplier used approximate number tokens per word. Default 1.6 empirically found average number tokens per word.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate price estimation for title and abstract screening using OpenAI's GPT API models — approximate_price_gpt","text":"object class \"gpt_price\". object list containing following components: price numerical value indicating total approximate price (USD) screening across gpt-models expected used screening. price_data dataset prices across gpt models expected used screening.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/approximate_price_gpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate price estimation for title and abstract screening using OpenAI's GPT API models — approximate_price_gpt","text":"","code":"prompt <- \"This is a prompt\"  app_price <- approximate_price_gpt(   data = filges2015_dat[1:2,],   prompt = prompt,   studyid = studyid,   title = title,   abstract = abstract,   model = c(\"gpt-4o-mini\", \"gpt-4\"),   reps = c(10, 1) )  app_price #> The approximate price of the (simple) screening will be around $0.0474. app_price$price_dollar #> [1] 0.0474 app_price$price_data #> # A tibble: 2 × 6 #>   prompt   model       iterations input_price_dollar output_price_dollar #>   <chr>    <chr>            <dbl>              <dbl>               <dbl> #> 1 Prompt 1 gpt-4o-mini         10             0.0022            0.000132 #> 2 Prompt 1 gpt-4                1             0.0438            0.00132  #> # ℹ 1 more variable: total_price_dollar <dbl>"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"Bibliometric toy data systematic review regarding Functional Family Therapy (FFT) Young People Treatment Non-opioid Drug Use (Filges et al., 2015). data includes 90 included 180 excluded randomly sampled references literature search systematic review.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"","code":"filges2015_dat"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"tibble 270 rows/studies 6 variables/columns","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/filges2015_dat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — filges2015_dat","text":"Filges, T., Andersen, D, & Jørgensen, -M. K (2015). Functional Family Therapy (FFT) Young People Treatment Non-opioid Drug Use: Systematic Review Campbell Systematic Reviews, doi:10.4073/csr.2015.14","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get API key from R environment variable. — get_api_key","title":"Get API key from R environment variable. — get_api_key","text":"Get API key R environment variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get API key from R environment variable. — get_api_key","text":"","code":"get_api_key(env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get API key from R environment variable. — get_api_key","text":"env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\". See set_api_key() set/create variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get API key from R environment variable. — get_api_key","text":"specified API key (NOTE: Avoid exposing console).","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get API key from R environment variable. — get_api_key","text":"get_api_key() can used executing set_api_key() adding api key permanently R environment using usethis::edit_r_environ(). write CHATGPT_KEY=[insert api key ] close .Renviron window restart R.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get API key from R environment variable. — get_api_key","text":"Find personal API key https://platform.openai.com/account/api-keys.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get API key from R environment variable. — get_api_key","text":"","code":"if (FALSE) { # \\dontrun{ get_api_key() } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a 'chatgpt' object — is_chatgpt","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"function returns TRUE chatgpt objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"","code":"is_chatgpt(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a 'chatgpt' object — is_chatgpt","text":"TRUE object inherits chatgpt class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"function returns TRUE chatgpt_tbl objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"","code":"is_chatgpt_tbl(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a 'chatgpt_tbl' object — is_chatgpt_tbl","text":"TRUE object inherits chatgpt_tbl class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a 'gpt' object — is_gpt","title":"Test if the object is a 'gpt' object — is_gpt","text":"function returns TRUE gpt objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a 'gpt' object — is_gpt","text":"","code":"is_gpt(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a 'gpt' object — is_gpt","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a 'gpt' object — is_gpt","text":"TRUE object inherits gpt class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_agg_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a 'gpt_agg_tbl' object — is_gpt_agg_tbl","title":"Test if the object is a 'gpt_agg_tbl' object — is_gpt_agg_tbl","text":"function returns TRUE gpt_agg_tbl objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_agg_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a 'gpt_agg_tbl' object — is_gpt_agg_tbl","text":"","code":"is_gpt_agg_tbl(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_agg_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a 'gpt_agg_tbl' object — is_gpt_agg_tbl","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_agg_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a 'gpt_agg_tbl' object — is_gpt_agg_tbl","text":"TRUE object inherits gpt_agg_tbl class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a 'gpt_tbl' object — is_gpt_tbl","title":"Test if the object is a 'gpt_tbl' object — is_gpt_tbl","text":"function returns TRUE gpt_tbl objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a 'gpt_tbl' object — is_gpt_tbl","text":"","code":"is_gpt_tbl(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a 'gpt_tbl' object — is_gpt_tbl","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_gpt_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a 'gpt_tbl' object — is_gpt_tbl","text":"TRUE object inherits gpt_tbl class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/model_prizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Model prize data (last updated October 28, 2024) — model_prizes","title":"Model prize data (last updated October 28, 2024) — model_prizes","text":"Data set containing input output prizes OpenAI's GPT API models.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/model_prizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model prize data (last updated October 28, 2024) — model_prizes","text":"","code":"model_prizes"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/model_prizes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model prize data (last updated October 28, 2024) — model_prizes","text":"data.frame containing 15 rows/models 3 variables/columns","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/model_prizes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model prize data (last updated October 28, 2024) — model_prizes","text":"OpenAI. Pricing. https://openai.com/api/pricing/","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for 'chatgpt' objects — print.chatgpt","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"Print methods 'chatgpt' objects","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"","code":"# S3 method for class 'chatgpt' print(x, ...)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"x object class 'chatgpt'. ... print arguments.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"Information find answer data sets pricing information.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"","code":"if (FALSE) { # \\dontrun{ print(x) } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for 'gpt' objects — print.gpt","title":"Print methods for 'gpt' objects — print.gpt","text":"Print methods 'gpt' objects","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for 'gpt' objects — print.gpt","text":"","code":"# S3 method for class 'gpt' print(x, ...)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for 'gpt' objects — print.gpt","text":"x object class 'gpt'. ... print arguments.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for 'gpt' objects — print.gpt","text":"Information find answer data sets pricing information.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for 'gpt' objects — print.gpt","text":"","code":"if (FALSE) { # \\dontrun{ print(x) } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for 'gpt_price' objects — print.gpt_price","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"Print methods 'gpt_price' objects","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"","code":"# S3 method for class 'gpt_price' print(x, ...)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"x object class \"gpt_price\". ... print arguments.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"total price screening across gpt-models expected used screening.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.gpt_price.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for 'gpt_price' objects — print.gpt_price","text":"","code":"if (FALSE) { # \\dontrun{ print(x) } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":null,"dir":"Reference","previous_headings":"","what":"Find updated rate limits for API models — rate_limits_per_minute","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"rate_limits_per_minute reports rate limits given api. function returns available requests per minute (RPM) well tokens per minute (TPM). Find general information https://platform.openai.com/docs/guides/rate-limits/overview.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"rate_limits_per_minute(   model = \"gpt-4\",   AI_tool = \"gpt\",   api_key = get_api_key() )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"model Character string name completion model. Default = \"gpt-4\". Can take multiple strings. Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. AI_tool Character string specifying AI tool api issued. Default \"gpt\". api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use httr2::secret_make_key(), httr2::secret_encrypt(), httr2::secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"tibble including variables information model used, number requests tokens per minute.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"if (FALSE) { # \\dontrun{ set_api_key()  rate_limits_per_minute() } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/sample_references.html","id":null,"dir":"Reference","previous_headings":"","what":"Random sample references — sample_references","title":"Random sample references — sample_references","text":"sample_referencessamples n rows dataset titles abstracts either without replacement. function supposed support construct test dataset, suggested Vembye et al. (2024).","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/sample_references.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random sample references — sample_references","text":"","code":"sample_references(   data,   n,   with_replacement = FALSE,   prob_vec = rep(1/n, nrow(data)) )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/sample_references.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random sample references — sample_references","text":"data Dataset containing titles abstracts wanted screened. n non-negative integer giving number rows choose. with_replacement Logical indicating sampling done without replacement. Default FALSE. prob_vec 'vector probability weights obtaining elements vector sampled.' Default vector 1/n.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/sample_references.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random sample references — sample_references","text":"dataset n rows.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/sample_references.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random sample references — sample_references","text":"Vembye, M. H., Christensen, J., Mølgaard, . B., & Schytt, F. L. W. (2024) GPT API Models Can Function Highly Reliable Second Screeners Titles Abstracts Systematic Reviews: Proof Concept Common Guidelines https://osf.io/preprints/osf/yrhzm","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/sample_references.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random sample references — sample_references","text":"","code":"excl_test_dat <- filges2015_dat[1:200,] |> sample_references(100)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze performance between the human and AI screening. — screen_analyzer","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"human AI title abstract screening done, function allows calculate performance measures screening, including overall accuracy, specificity sensitivity screening, well inter-rater reliability kappa statistics.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"","code":"screen_analyzer(x, human_decision = human_code, key_result = TRUE)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"x object either class'gpt' 'chatgpt' dataset either class 'gpt_tbl', 'chatgpt_tbl', 'gpt_agg_tbl' human_decision Indicate variable data contains human_decision. variable must numeric, containing 1 (included references) 0 (excluded references) . key_result Logical indicating raw agreement, recall, specificity measures returned. Default TRUE.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"tibble screening performance measures. tibble includes following variables:","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"Gartlehner, G., Wagner, G., Lux, L., Affengruber, L., Dobrescu, ., Kaminski-Hartenthaler, ., & Viswanathan, M. (2019). Assessing accuracy machine-assisted abstract screening DistillerAI: user study. Systematic Reviews, 8(1), 277. doi:10.1186/s13643-019-1221-3 McHugh, M. L. (2012). Interrater reliability: kappa statistic. Biochemia Medica, 22(3), 276-282. https://pubmed.ncbi.nlm.nih.gov/23092060/ Syriani, E., David, ., & Kumar, G. (2023). Assessing Ability ChatGPT Screen Articles Systematic Reviews. ArXiv Preprint ArXiv:2307.06464.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_analyzer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze performance between the human and AI screening. — screen_analyzer","text":"","code":"x <- AIscreenR:::result_object x |> screen_analyzer() |> print(width=260) #> # A tibble: 12 × 7 #>    promptid model               reps top_p p_agreement recall specificity #>       <int> <chr>              <int> <dbl>       <dbl>  <dbl>       <dbl> #>  1        1 gpt-3.5-turbo-0613     1 0.001       0.889  0.818       0.920 #>  2        1 gpt-3.5-turbo-0613    10 0.001       0.881  0.822       0.911 #>  3        1 gpt-3.5-turbo-0613     1 1           0.859  0.756       0.911 #>  4        1 gpt-3.5-turbo-0613    10 1           0.911  0.911       0.911 #>  5        1 gpt-4                  1 0.001       0.926  0.978       0.9   #>  6        1 gpt-4                  1 1           0.956  1           0.933 #>  7        2 gpt-3.5-turbo-0613     1 0.001       0.889  0.8         0.933 #>  8        2 gpt-3.5-turbo-0613    10 0.001       0.889  0.822       0.922 #>  9        2 gpt-3.5-turbo-0613     1 1           0.881  0.778       0.933 #> 10        2 gpt-3.5-turbo-0613    10 1           0.896  0.844       0.922 #> 11        2 gpt-4                  1 0.001       0.933  0.978       0.911 #> 12        2 gpt-4                  1 1           0.933  0.956       0.920"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-screen failed requests. — screen_errors.chatgpt","title":"Re-screen failed requests. — screen_errors.chatgpt","text":"function supports re-screening failed title abstract requests screened tabscreen_gpt.original(). function deprecated OpenAI deprecated function_call functions argument used tabscreen_gpt.original().","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-screen failed requests. — screen_errors.chatgpt","text":"","code":"# S3 method for class 'chatgpt' screen_errors(   object,   ...,   api_key = get_api_key(),   max_tries = 4,   max_seconds,   is_transient,   backoff,   after )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.chatgpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-screen failed requests. — screen_errors.chatgpt","text":"object object class 'chatgpt'. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. used original screening (e.g., tabscreen_gpt.original()), argument(s) must specified . api_key Numerical value personal API key. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), httr2::req_perform() retry' (Wickham, 2023). Default max_tries 4. missing, value max_seconds original screening (e.g., conducted tabscreen_gpt.original()) used. is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). missing, is_transient function original screening (e.g., conducted tabscreen_gpt.original()) used. backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). missing, backoffvalue original screening (e.g., conducted tabscreen_gpt.original()) used. 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). missing, value original screening (e.g., conducted tabscreen_gpt.original()) used.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-screen failed requests. — screen_errors.chatgpt","text":"Object class 'chatgpt' similar object returned tabscreen_gpt.original(). See documentation value tabscreen_gpt.original().","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.chatgpt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Re-screen failed requests. — screen_errors.chatgpt","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.chatgpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-screen failed requests. — screen_errors.chatgpt","text":"","code":"if (FALSE) { # \\dontrun{ prompt <- \"Is this study about a Functional Family Therapy (FFT) intervention?\"  obj_with_error <-   tabscreen_gpt(     data = filges2015_dat[1:2,],     prompt = prompt,     studyid = studyid,     title = title,     abstract = abstract,     model = c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-16k-0613\"),     max_tries = 1,     reps = 10     )  obj_rescreened <-   obj_with_error |>   screen_error()  # Alternatively re-set max_tries if errors still appear obj_rescreened <-   obj_with_error |>   screen_error(max_tries = 16) } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.gpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-screen failed requests. — screen_errors.gpt","title":"Re-screen failed requests. — screen_errors.gpt","text":"function supports re-screening failed title abstract requests screened tabscreen_gpt()/tabscreen_gpt.tools().","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.gpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-screen failed requests. — screen_errors.gpt","text":"","code":"# S3 method for class 'gpt' screen_errors(   object,   api_key = get_api_key(),   max_tries = 16,   max_seconds,   is_transient,   backoff,   after,   ... )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.gpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-screen failed requests. — screen_errors.gpt","text":"object object class 'gpt'. api_key Numerical value personal API key. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), httr2::req_perform() retry' (Wickham, 2023). Default max_tries 16. missing, value max_seconds original screening conducted tabscreen_gpt() used. is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). missing, is_transient function original screening conducted tabscreen_gpt() used. backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). missing, backoffvalue original screening conducted tabscreen_gpt() used. 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). missing, value original screening conducted tabscreen_gpt() used. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. used original screening tabscreen_gpt(), argument(s) must specified .","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.gpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-screen failed requests. — screen_errors.gpt","text":"object class 'gpt' similar object returned tabscreen_gpt(). See documentation tabscreen_gpt().","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.gpt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Re-screen failed requests. — screen_errors.gpt","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.gpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-screen failed requests. — screen_errors.gpt","text":"","code":"if (FALSE) { # \\dontrun{ prompt <- \"Is this study about a Functional Family Therapy (FFT) intervention?\"  obj_with_error <-   tabscreen_gpt(     data = filges2015_dat[1:10,],     prompt = prompt,     studyid = studyid,     title = title,     abstract = abstract,     model = \"gpt-4o\"     )  obj_rescreened <-   obj_with_error |>   screen_error()  } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to re-screen failed title and abstract requests. — screen_errors","title":"Generic function to re-screen failed title and abstract requests. — screen_errors","text":"generic function re-screen failed title abstract requests.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to re-screen failed title and abstract requests. — screen_errors","text":"","code":"screen_errors(   object,   api_key = get_api_key(),   max_tries = 4,   max_seconds,   is_transient,   backoff,   after,   ... )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to re-screen failed title and abstract requests. — screen_errors","text":"object object either class 'gpt' 'chatgpt'. api_key Numerical value personal API key. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), httr2::req_perform() retry' (Wickham, 2023). Default max_tries 16. missing, value max_seconds original screening conducted tabscreen_gpt() used. is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). missing, is_transient function original screening conducted tabscreen_gpt() used. backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). missing, backoffvalue original screening conducted tabscreen_gpt() used. 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). missing, value original screening conducted tabscreen_gpt() used. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. used original screening tabscreen_gpt(), argument(s) must specified .","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to re-screen failed title and abstract requests. — screen_errors","text":"object class 'gpt' 'chatgpt' similar object returned tabscreen_gpt(). See documentation tabscreen_gpt().","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/screen_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to re-screen failed title and abstract requests. — screen_errors","text":"","code":"if (FALSE) { # \\dontrun{ prompt <- \"Is this study about a Functional Family Therapy (FFT) intervention?\"  obj_with_error <-   tabscreen_gpt(     data = filges2015_dat[1:10,],     prompt = prompt,     studyid = studyid,     title = title,     abstract = abstract,     model = \"gpt-4o-mini\"     )  obj_rescreened <-   obj_with_error |>   screen_error()  } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a temporary R environment API key variable — set_api_key","title":"Creating a temporary R environment API key variable — set_api_key","text":"function automatically sets/creates interim R environment variable API key call given AI model (e.g. ChatGPT). Thereby users avoid exposing API keys. API key set console, /can revealed via .Rhistory. Find information issue https://httr2.r-lib.org/articles/wrapping-apis.html.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"set_api_key(key, env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a temporary R environment API key variable — set_api_key","text":"key Character string (ideally encrypt) API key. See encrypt key : https://httr2.r-lib.org/articles/wrapping-apis.html#basics. provided, returns password box true API key can secretly entered. env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\".","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a temporary R environment API key variable — set_api_key","text":"temporary environment variable name env_var. key missing, returns password box true API key can entered.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating a temporary R environment API key variable — set_api_key","text":"set_api_key() successfully executed, get_api_key() automatically retrieves API key R environment users need specify API running functions package call API. API key can permanently set using usethis::edit_r_environ(). write CHATGPT_KEY=[insert api key ] close .Renviron window restart R.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Creating a temporary R environment API key variable — set_api_key","text":"Find personal API key https://platform.openai.com/account/api-keys.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"if (FALSE) { # \\dontrun{ set_api_key() } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.original.html","id":null,"dir":"Reference","previous_headings":"","what":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","title":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","text":"function deprecated (can still used) OpenAI deprecated function_call functions argument used function. Instead use tabscreen_gpt.tools() handles function calling via tools tool_choice arguments. function supports conduct title abstract screening GPT API models R. function works GPT-4, specifically gpt-4-0613. draw models, use tabscreen_gpt.tools(). function allows run title abstract screening across multiple prompts repeated questions check consistency across answers. function draws newly developed function calling better steer output responses. function used Vembye et al. (2024).","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.original.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","text":"","code":"tabscreen_gpt.original(   data,   prompt,   studyid,   title,   abstract,   ...,   model = \"gpt-4\",   role = \"user\",   functions = incl_function_simple,   function_call_name = list(name = \"inclusion_decision_simple\"),   top_p = 1,   time_info = TRUE,   token_info = TRUE,   api_key = get_api_key(),   max_tries = 16,   max_seconds = NULL,   is_transient = gpt_is_transient,   backoff = NULL,   after = NULL,   rpm = 10000,   reps = 1,   seed = NULL,   progress = TRUE,   messages = TRUE,   incl_cutoff_upper = 0.5,   incl_cutoff_lower = incl_cutoff_upper - 0.1,   force = FALSE )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.original.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","text":"data Dataset containing titles abstracts. prompt Prompt(s) paste title abstract. studyid Unique ID study. missing, generated automatically. title Name variable containing title information. abstract Name variable containing abstract information. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. model Character string name completion model. Can take multiple models, including gpt-4 models. Default = \"gpt-4\" (.e., gpt-4-0613). model shown outperform gpt-3.5-turbo models terms ability detect relevant studies (Vembye et al., preparation). Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. role Character string indicate role user. Default \"user\". functions Function steer output. Default incl_function_simple. get detailed responses use AIscreenR:::incl_function. Also see 'Examples . Find documentation function calling https://openai.com/blog/function-calling---api-updates. function_call_name Functions call. Default list(name = \"inclusion_decision_simple\"). get detailed responses use list(name = \"inclusion_decision\"). Also see 'Examples . top_p 'alternative sampling temperature, called nucleus sampling, model considers results tokens top_p probability mass. 0.1 means tokens comprising top 10% probability mass considered. generally recommend altering temperature .' (OPEN-AI). Default 1. Find documentation https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p. time_info Logical indicating whether run time request/question included data. Default = TRUE. token_info Logical indicating whether number prompt completion tokens per request included output data. Default = TRUE. TRUE, output object include price information conducted screening. api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use httr2::secret_make_key(), httr2::secret_encrypt(), httr2::secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), httr2::req_perform() retry' (Wickham, 2023). is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). rpm Numerical value indicating number requests per minute (rpm) available specified api key. Find information https://platform.openai.com/docs/guides/rate-limits/---rate-limits---api. Alternatively, use rate_limits_per_minute(). reps Numerical value indicating number times question sent OpenAI's GPT API models. can useful test consistency answers. Default 1 using 3.5 models, recommend setting value 10. seed Numerical value seed ensure proper, parallel-safe random numbers produced. progress Logical indicating whether progress line shown running title abstract screening parallel. Default TRUE. messages Logical indicating whether print messages embedded function. Default TRUE. incl_cutoff_upper Numerical value indicating probability threshold studies included. Default 0.5, indicates titles abstracts OpenAI's GPT API model included 50 percent times included. incl_cutoff_lower Numerical value indicating probability threshold studies check human. Default 0.4, means ask OpenAI's GPT API model questions 10 times includes title abstract 4 times, suggest study check human. force Logical argument indicating whether force function use 10 iterations gpt-3.5 models 1 iteration gpt-4 models. argument developed avoid conduct wrong extreme sized screening. Default FALSE.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.original.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","text":"object class \"chatgpt\". object list containing following components: answer_data_sum dataset summarized, probabilistic inclusion decision title abstract across multiple repeated questions. answer_data_all dataset individual answers. price numerical value indicating total price (USD) screening. price_data dataset prices across gpt models used screening.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.original.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","text":"answer_data_sum data contains following mandatory variables: answer_data_all data contains following mandatory variables: requests failed reach server, chatgpt object contains error data set (error_data) variables answer_data_all failed request references . price_data data contains following variables: Find current token pricing https://openai.com/pricing.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.original.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","text":"Vembye, M. H., Christensen, J., Mølgaard, . B., & Schytt, F. L. W. (2024) GPT API Models Can Function Highly Reliable Second Screeners Titles Abstracts Systematic Reviews: Proof Concept Common Guidelines https://osf.io/preprints/osf/yrhzm Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.original.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title and abstract screening with GPT API models using function calls via the original function call arguments — tabscreen_gpt.original","text":"","code":"if (FALSE) { # \\dontrun{  set_api_key()  prompt <- \"Is this study about a Functional Family Therapy (FFT) intervention?\"  tabscreen_gpt.original(   data = filges2015_dat[1:2,],   prompt = prompt,   studyid = studyid,   title = title,   abstract = abstract,   max_tries = 2,   )   # Get detailed descriptions of the gpt decisions by using the  # embedded function calling functions from the package. See example below.  tabscreen_gpt.original(    data = filges2015_dat[1:2,],    prompt = prompt,    studyid = studyid,    title = title,    abstract = abstract,    functions = AIscreenR:::incl_function,    function_call_name = list(name = \"inclusion_decision\"),    max_tries = 2  ) } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","title":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","text":"function supports conduct title abstract screening GPT API models R. Specifically, allows user draw GPT-3.5, GPT-4, GPT-4o, GPT-4o-mini, fine-tuned models. function allows run title abstract screening across multiple prompts repeated questions check consistency across answers. can done parallel. function draws newly developed function calling called via tools argument request body. main different tabscreen_gpt.tools() tabscreen_gpt.original(). Function calls ensure reliable consistent responses ones requests. See Vembye et al. (2024) guidance adequately conduct title abstract screening GPT models.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","text":"","code":"tabscreen_gpt.tools(data, prompt, studyid, title, abstract,    model = \"gpt-4\", role = \"user\", tools = NULL, tool_choice = NULL, top_p = 1,    time_info = TRUE, token_info = TRUE, api_key = get_api_key(), max_tries = 16,    max_seconds = NULL, is_transient = gpt_is_transient, backoff = NULL,    after = NULL, rpm = 10000, reps = 1, seed = NULL, progress = TRUE,    decision_description = FALSE, messages = TRUE, incl_cutoff_upper = NULL,    incl_cutoff_lower = NULL, force = FALSE, fine_tuned = FALSE, ...)  tabscreen_gpt(data, prompt, studyid, title, abstract,    model = \"gpt-4\", role = \"user\", tools = NULL, tool_choice = NULL, top_p = 1,    time_info = TRUE, token_info = TRUE, api_key = get_api_key(), max_tries = 16,    max_seconds = NULL, is_transient = gpt_is_transient, backoff = NULL,    after = NULL, rpm = 10000, reps = 1, seed = NULL, progress = TRUE,    decision_description = FALSE, messages = TRUE, incl_cutoff_upper = NULL,    incl_cutoff_lower = NULL, force = FALSE, fine_tuned = FALSE, ...)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","text":"data Dataset containing titles abstracts. prompt Prompt(s) paste title abstract. studyid Unique ID study. missing, generated automatically. title Name variable containing title information. abstract Name variable containing abstract information. model Character string name completion model. Can take multiple models, including gpt-4 models. Default \"gpt-4\" (.e., gpt-4-0613). model shown outperform gpt-3.5-turbo models terms ability detect relevant studies (Vembye et al., 2024). Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. role Character string indicating role user. Default \"user\". tools argument allows user apply customized functions. See https://platform.openai.com/docs/api-reference/chat/create#chat-create-tools. Default NULL. specified default function calls AIscreenR used. tool_choice customized function provided argument 'controls () tool called model' (OpenAI). Default NULL. set NULL using customized function, default \"auto\". See https://platform.openai.com/docs/api-reference/chat/create#chat-create-tool_choice. top_p 'alternative sampling temperature, called nucleus sampling, model considers results tokens top_p probability mass. 0.1 means tokens comprising top 10% probability mass considered. generally recommend altering temperature .' (OpenAI). Default 1. Find documentation https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p. time_info Logical indicating whether run time request/question included data. Default = TRUE. token_info Logical indicating whether number prompt completion tokens per request included output data. Default = TRUE. TRUE, output object include price information conducted screening. api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use httr2::secret_make_key(), httr2::secret_encrypt(), httr2::secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key adding api key locale environment variable. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), httr2::req_perform() retry' (Wickham, 2023). default max_tries 16. is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). function runs automatically AIscreenR can customized user necessary. backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). rpm Numerical value indicating number requests per minute (rpm) available specified api key. Find information https://platform.openai.com/docs/guides/rate-limits/---rate-limits---api. Alternatively, use rate_limits_per_minute(). reps Numerical value indicating number times question sent OpenAI's GPT API models. can useful test consistency answers. Default 1 using 3.5 models, recommend setting value 10. seed Numerical value seed ensure proper, parallel-safe random numbers produced. progress Logical indicating whether progress line shown running title abstract screening parallel. Default TRUE. decision_description Logical indicating whether detailed description follow decision made GPT. Default FALSE. conducting large-scale screening, generally recommend using feature since increase cost screening substantially. generally recommend using encountering disagreements GPT human decisions. messages Logical indicating whether print messages embedded function. Default TRUE. incl_cutoff_upper Numerical value indicating probability threshold studies included. relevant questions requested multiple times (.e., reps > 1). Default 0.5, indicating titles abstracts included GPT included study 50 percent times. incl_cutoff_lower Numerical value indicating probability threshold studies check human. relevant questions requested multiple times (.e., reps > 1). Default 0.4, meaning ask GPT questions 10 times includes title abstract 4 times, suggest study check human. force Logical argument indicating whether force function use 10 iterations gpt-3.5 models 1 iteration gpt-4 models gpt-4o-mini. argument developed avoid conduct wrong extreme sized screening. Default FALSE. fine_tuned Logical indicating whether fine-tuned model used. Default FALSE. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","text":"object class 'gpt'. object list containing following datasets components: answer_data dataset class 'gpt_tbl' individual answers. price_dollar numerical value indicating total price (USD) screening. price_data dataset prices across gpt models used screening. run_date string indicating date screening ran. frameworks, time details considered important report (see e.g., Thomas et al., 2024). ... additional attributed values/components, including attributed list arguments used function. used  screen_errors() re-screen transient errors. question requested multiple times, object also contain following dataset results aggregated across iterated requests/questions. answer_data_aggregated dataset class 'gpt_agg_tbl' summarized, probabilistic inclusion decision title abstract across multiple repeated questions.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.tools.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","text":"answer_data data contains following mandatory variables: requests failed reach server, gpt object contains error dataset (error_data) variables answer_data failed request references . question requested multiple times, answer_data_aggregated data contains following mandatory variables:  price_data data contains following variables: Find current token pricing https://openai.com/pricing model_prizes.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.tools.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","text":"Vembye, M. H., Christensen, J., Mølgaard, . B., & Schytt, F. L. W. (2024) GPT API Models Can Function Highly Reliable Second Screeners Titles Abstracts Systematic Reviews: Proof Concept Common Guidelines https://osf.io/preprints/osf/yrhzm Thomas, J. et al. (2024). Responsible AI Evidence SynthEsis (RAISE): guidance recommendations. https://osf.io/cn7x4 Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.tools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title and abstract screening with GPT API models using function calls via the tools argument — tabscreen_gpt.tools","text":"","code":"if (FALSE) { # \\dontrun{  library(future)  set_api_key()  prompt <- \"Is this study about a Functional Family Therapy (FFT) intervention?\"  plan(multisession)  tabscreen_gpt(   data = filges2015_dat[1:2,],   prompt = prompt,   studyid = studyid,   title = title,   abstract = abstract   )  plan(sequential)   # Get detailed descriptions of the gpt decisions.   plan(multisession)   tabscreen_gpt(    data = filges2015_dat[1:2,],    prompt = prompt,    studyid = studyid,    title = title,    abstract = abstract,    decision_description = TRUE  )  plan(sequential)  } # }"},{"path":"https://mikkelvembye.github.io/AIscreenR/news/index.html","id":"aiscreenr-0009999","dir":"Changelog","previous_headings":"","what":"AIscreenR 0.0.0.9999","title":"AIscreenR 0.0.0.9999","text":"First devel version","code":""}]
