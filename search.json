[{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikkel H. Vembye. Author, maintainer.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vembye M (2023). AIscreenR: AI screening tools systematic reviews. R package version 0.0.0.9004, https://mikkelvembye.github.io/AIscreenR/.","code":"@Manual{,   title = {AIscreenR: AI screening tools for systematic reviews},   author = {Mikkel H. Vembye},   year = {2023},   note = {R package version 0.0.0.9004},   url = {https://mikkelvembye.github.io/AIscreenR/}, }"},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"aiscreenr-ai-screening-tools-in-r-for-systematic-reviewing","dir":"","previous_headings":"","what":"AI screening tools for systematic reviews","title":"AI screening tools for systematic reviews","text":"goal AIscreenR use AI tools support screening processes (including title abstract screening) systematic reviews related literature reviews.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"AI screening tools for systematic reviews","text":"can install development version AIscreenR GitHub : Small example ask question ChatGPT load ris files. example downloaded ris files EPPI-Reviewer. NOTE: extensive examples use tool soon added!","code":"# install.packages(\"devtools\") devtools::install_github(\"MikkelVembye/AIscreenR\") # Find your api key at https://platform.openai.com/account/api-keys  # Thereafter, either encrypt it with the secret functions from the httr2 package # see https://httr2.r-lib.org/reference/secrets.html or run set_api_key()  # and then enter you key. library(AIscreenR) library(httr2) library(revtools) library(tibble) library(dplyr)  set_api_key(AIscreenR:::testing_key_chatgpt())  rate_limits <- rate_limits_per_minute() rate_limits #> # A tibble: 1 × 3 #>   model              requests_per_minute tokens_per_minute #>   <chr>                            <dbl>             <dbl> #> 1 gpt-3.5-turbo-0613                3500             90000  q <- \"What is a banana?\" ask_gpt_0301(q, rpm = rate_limits$requests_per_minute) #> # A tibble: 1 × 3 #>   answer                                                         run_time tokens #>   <chr>                                                             <dbl>  <int> #> 1 A banana is a long, curved fruit with a yellow skin and a pul…      2.1     91 # Find documentation behind by running the below code ?AIscreenR::ask_gpt_0301 # References included for full-text screening include <- c(45542056, 84953535, 84964488, 84956376, 84971042, 84966265)  ris_dat <- revtools::read_bibliography(\"other/ris files/Pilotscreen_executive_functions.ris\") |>    suppressWarnings() |>    select(eppi_id, title, abstract) |>    as_tibble() |>    mutate(     human_code = if_else(eppi_id %in% include, 1, 0)   )  ris_dat |> head(5) #> # A tibble: 5 × 4 #>   eppi_id  title                                             abstract human_code #>   <chr>    <chr>                                             <chr>         <dbl> #> 1 84952933 A 4-component scale of working memory: Developin… Introdu…          0 #> 2 84955993 A quick and easy strategy to reduce test anxiety… The neg…          0 #> 3 84972741 How do 3-year-olds use relevance inferencing to … If a ch…          0 #> 4 84952367 The impact of Texas HIPPY on school readiness an… This st…          0 #> 5 84959326 The effect of two different approaches to teachi… In Janu…          0"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/AIscreenR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AIscreenR: AI screening tools for systematic reviews — AIscreenR-package","title":"AIscreenR: AI screening tools for systematic reviews — AIscreenR-package","text":"Screening AI tools including ChatGPT.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/AIscreenR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AIscreenR: AI screening tools for systematic reviews — AIscreenR-package","text":"Maintainer: Mikkel H. Vembye mikkel.vembye@gmail.com (ORCID)","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/FFT_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Ris-file data from Functional Family Therapy (FFT) systematic review — FFT_dat","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — FFT_dat","text":"Bibliometric toy data systematic review regarding Functional Family Therapy (FFT) Young People Treatment Non-opioid Drug Use (Filges et al., 2015). data includes 100 excluded 50 included references, respectively.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/FFT_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — FFT_dat","text":"","code":"FFT_dat"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/FFT_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — FFT_dat","text":"tibble 150 rows/studies 4 variables/columns","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/FFT_dat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ris-file data from Functional Family Therapy (FFT) systematic review — FFT_dat","text":"Filges, T., Andersen, D, & Jørgensen, -M. K (2015). Functional Family Therapy (FFT) Young People Treatment Non-opioid Drug Use: Systematic Review Campbell Systematic Reviews, doi:10.4073/csr.2015.14","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get API key from temporary R environment variable — get_api_key","title":"Get API key from temporary R environment variable — get_api_key","text":"Get API key temporary R environment variable","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get API key from temporary R environment variable — get_api_key","text":"","code":"get_api_key(env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get API key from temporary R environment variable — get_api_key","text":"env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\". See set_api_key() set/create variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get API key from temporary R environment variable — get_api_key","text":"specified API key (NOTE: Avoid exposing console).","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get API key from temporary R environment variable — get_api_key","text":"","code":"if (FALSE) { get_api_key() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a chatgpt object — is_chatgpt","title":"Test if the object is a chatgpt object — is_chatgpt","text":"function returns TRUE chatgpt objects, FALSE objects.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a chatgpt object — is_chatgpt","text":"","code":"is_chatgpt(x)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a chatgpt object — is_chatgpt","text":"x object","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/is_chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a chatgpt object — is_chatgpt","text":"TRUE object inherits chatgpt class.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for 'chatgpt' objects — print.chatgpt","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"Print methods 'chatgpt' objects","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"","code":"# S3 method for chatgpt print(x, ...)"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"x object class \"chatgpt\". ... print arguments.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"object head summarized final answer data ideally deduced multiple answers ChatGPT.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/print.chatgpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for 'chatgpt' objects — print.chatgpt","text":"","code":"if (FALSE) { print(x) }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":null,"dir":"Reference","previous_headings":"","what":"Find updated rate limits for API models — rate_limits_per_minute","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"rate_limits_per_minute reports rate limits given api. function returns available requests per minute (RPM) well tokens per minute (TPM). Find general information https://platform.openai.com/docs/guides/rate-limits/overview.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"rate_limits_per_minute(   AI_tool = \"chatgpt\",   model = \"gpt-3.5-turbo-0613\",   api_key = get_api_key() )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"AI_tool Character string specifying AI tool api issued. Default \"chatgpt\". model Character string name completion model. Default = \"gpt-3.5-turbo-0613\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use secret_make_key(), secret_encrypt(), secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"tibble including variables information model used, number requests tokens per minute.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"if (FALSE) { set_api_key()  rate_limits_per_minute() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a temporary R environment API key variable — set_api_key","title":"Creating a temporary R environment API key variable — set_api_key","text":"function automatically sets/creates interim R environment variable API key call given AI model (e.g. ChatGPT). Thereby users avoid exposing API keys. API key set console, /can revealed via .Rhistory. Find information issue https://httr2.r-lib.org/articles/wrapping-apis.html","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"set_api_key(key, env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a temporary R environment API key variable — set_api_key","text":"key Character string (ideally encrypt) API key. provided returns password box true API key can entered secretly. env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\".","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a temporary R environment API key variable — set_api_key","text":"temporary environment variable name env_var. key missing, returns password box true API key can entered.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating a temporary R environment API key variable — set_api_key","text":"set_api_key() successfully executed, get_api_key() automatically retrieves API key R environment users need specify API running functions package call API.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"if (FALSE) { set_api_key() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"function supports conduct title abstract screening ChatGPT R. function allows run title abstract screening across multiple prompts repeated questions check consistency across answers. function draws newly developed function calling better steer output responses.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"","code":"tabscreen_gpt(   data,   prompt,   studyid,   title,   abstract,   ...,   arrange_var = studyid,   model = \"gpt-3.5-turbo-0613\",   role = \"user\",   functions = incl_function_simple,   function_call_name = list(name = \"inclusion_decision_simple\"),   top_p = 1,   time_info = TRUE,   token_info = TRUE,   api_key = get_api_key(),   max_tries = 8,   max_seconds = NULL,   is_transient = gpt_is_transient,   backoff = NULL,   after = NULL,   rpm = 3500,   reps = 1,   seed = NULL,   progress = TRUE,   messages = TRUE,   incl_cutoff_upper = 0.5,   incl_cutoff_lower = 0.4 )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"data Dataset containing titles abstracts. prompt Prompt(s) paste title abstract. studyid Unique ID study. missing, generated automatically. title Name variable containing title information. abstract Name variable containing abstract information. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. arrange_var Function indicating variables determining arrangement data. Default studyid. model Character string name completion model. Can take multiple models, including gpt-4 models. Default = \"gpt-3.5-turbo-0613\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. role Character string indicate role user. Default \"user\". functions Function steer output. Default incl_function_simple. get detailed responses use AIscreenR:::incl_function. Also see 'Examples . Find documentation function calling https://openai.com/blog/function-calling---api-updates. function_call_name Functions call. Default list(name = \"inclusion_decision_simple\"). get detailed responses use list(name = \"inclusion_decision\"). Also see 'Examples . top_p 'alternative sampling temperature, called nucleus sampling, model considers results tokens top_p probability mass. 0.1 means tokens comprising top 10% probability mass considered. generally recommend altering temperature .' (OPEN-AI). Find documentation https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p. time_info Logical indicating whether run time request/question included data. Default = TRUE. token_info Logical indicating whether number prompt completion tokens per request included output data. Default = TRUE. api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use secret_make_key(), secret_encrypt(), secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), req_perform() retry' (Wickham, 2023). is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). rpm Numerical value indicating number requests per minute (rpm) available specified api key. Find information https://platform.openai.com/docs/guides/rate-limits/---rate-limits---api. Alternatively, use rate_limits_per_minute(). reps Numerical value indicating number times question sent ChatGPT. can useful test consistency answers. Default 1 using 3.5 models, recommend setting value 10. seed Numerical value seed ensure proper, parallel-safe random numbers produced. progress Logical indicating whether progress line shown running title abstract screening parallel. Default TRUE. messages Logical indicating whether print messages embedded function. Defualt TRUE. incl_cutoff_upper Numerical value indicating probability threshold studies included. Default 0.5, indicates titles abstracts ChatGPT included 50 percent times included. incl_cutoff_lower Numerical value indicating probability threshold studies check human. Default 0.4, means ask ChatGPT questions 10 times includes title abstract 4 times, suggest study check human.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"object class \"chatgpt\". object list containing following components: answer_data_sum dataset summerized, probalistic inclusion decision title abstract across multiple repeated questions. answer_data_all dataset individual answers. price numerical value indicating total price screening. price_data dataset prices across gpt models used screening.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"answer_data_sum data contains following mandatory variables: answer_data_all data contains following mandatory variables: price_data data contains following variables: Find current token pricing https://openai.com/pricing.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title and abstract screening with ChatGPT using function calls. — tabscreen_gpt","text":"","code":"if (FALSE) { tabscreen_gpt(   data = FFT_dat[1:2,],   prompt = prompt,   studyid = studyid,   title = title,   abstract = abstract,   model = c(\"gpt-3.5-turbo-0613\", \"gpt-3.5-turbo-16k-0613\"),   max_tries = 1,   reps = 10   )   # Get detailed descriptions of the gpt decisions by using the  # embedded function calling functions from the package. See example below.  tabscreen_gpt(    data = FFT_dat[1:2,],    prompt = prompt,    studyid = studyid,    title = title,    abstract = abstract,    functions = AIscreenR:::incl_function,    function_call_name = list(name = \"inclusion_decision\"),    max_tries = 1,    reps = 2  ) }"}]
