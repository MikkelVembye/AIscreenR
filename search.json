[{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikkel H. Vembye. Author, maintainer.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vembye M (2023). AIscreenR: AI screening tools systematic reviews. R package version 0.0.0.9999, https://mikkelvembye.github.io/AIscreenR/.","code":"@Manual{,   title = {AIscreenR: AI screening tools for systematic reviews},   author = {Mikkel H. Vembye},   year = {2023},   note = {R package version 0.0.0.9999},   url = {https://mikkelvembye.github.io/AIscreenR/}, }"},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"aiscreenr-ai-screening-tools-in-r-for-systematic-reviewing","dir":"","previous_headings":"","what":"AI screening tools for systematic reviews","title":"AI screening tools for systematic reviews","text":"goal AIscreenR use AI tools support screening processes (including title abstract screening) systematic reviews related literature reviews.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"AI screening tools for systematic reviews","text":"can install development version AIscreenR GitHub : Small example ask question ChatGPT","code":"# install.packages(\"devtools\") devtools::install_github(\"MikkelVembye/AIscreenR\") # Find your api key at https://platform.openai.com/account/api-keys  # Thereafter, either encrypt it with the secret functions from the httr2 package # see https://httr2.r-lib.org/reference/secrets.html or run set_api_key()  # and then enter you key. library(AIscreenR) library(httr2) #> Warning: package 'httr2' was built under R version 4.2.3  set_api_key(AIscreenR:::testing_key_chatgpt())  rate_limits <- rate_limits_per_minute()  q <- \"What is a banana?\" ask_gpt(q, rpm = rate_limits$requests_per_minute) #> # A tibble: 1 × 3 #>   answer                                                         run_time tokens #>   <chr>                                                             <dbl>  <int> #> 1 A banana is a fruit that is elongated and curved with a soft …        4     52 # Find documentation behind by running the below code ?AIscreenR::ask_gpt"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/ask_gpt_0301.html","id":null,"dir":"Reference","previous_headings":"","what":"Asking a single question to ChatGPT (0301 models) — ask_gpt_0301","title":"Asking a single question to ChatGPT (0301 models) — ask_gpt_0301","text":"function makes possible ask question ChatGPT. reps > 1 question asked reps times. can useful test consistency answers.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/ask_gpt_0301.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asking a single question to ChatGPT (0301 models) — ask_gpt_0301","text":"","code":"ask_gpt_0301(   question,   ...,   time_info = TRUE,   token_info = TRUE,   model = \"gpt-3.5-turbo-0301\",   role = \"user\",   api_key = get_api_key(),   max_tries = 8,   max_seconds = NULL,   is_transient = gpt_is_transient,   backoff = NULL,   after = NULL,   rpm = 3500,   reps = 1,   seed = NULL )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/ask_gpt_0301.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asking a single question to ChatGPT (0301 models) — ask_gpt_0301","text":"question Character string question want ChatGPT answer. ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. time_info Logical indicating whether run time request/question included data. Default = TRUE. token_info Logical indicating whether total number tokens per request included output data. Default = TRUE. model Character string name completion model. Default = \"gpt-3.5-turbo-0301\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. role Character string indicate role user. Default \"user\". api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use secret_make_key(), secret_encrypt(), secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), req_perform() retry' (Wickham, 2023). is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). rpm Numerical value indicating number requests per minute (rpm) available specified api key. Find information https://platform.openai.com/docs/guides/rate-limits/---rate-limits---api. Alternatively, use rate_limits_per_minute(). reps Numerical value indicating number times question sent ChatGPT. can useful test consistency answers. Default 1. seed Numerical value seed ensure proper, parallel-safe random numbers produced.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/ask_gpt_0301.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asking a single question to ChatGPT (0301 models) — ask_gpt_0301","text":"tibble including following variables, ChatGPT answer, running time (seconds) request, total amount tokens used.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/ask_gpt_0301.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Asking a single question to ChatGPT (0301 models) — ask_gpt_0301","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/ask_gpt_0301.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asking a single question to ChatGPT (0301 models) — ask_gpt_0301","text":"","code":"if (FALSE) { # Find your api key at https://platform.openai.com/account/api-keys set_api_key()  q <- \"What is a banana?\" ask_gpt_0301(q) }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get API key from temporary R environment variable — get_api_key","title":"Get API key from temporary R environment variable — get_api_key","text":"Get API key temporary R environment variable","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get API key from temporary R environment variable — get_api_key","text":"","code":"get_api_key(env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get API key from temporary R environment variable — get_api_key","text":"env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\". See set_api_key() set/create variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get API key from temporary R environment variable — get_api_key","text":"specified API key (NOTE: Avoid exposing console).","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/get_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get API key from temporary R environment variable — get_api_key","text":"","code":"if (FALSE) { get_api_key() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":null,"dir":"Reference","previous_headings":"","what":"Find updated rate limits for API models — rate_limits_per_minute","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"rate_limits_per_minute reports rate limits given api. includes allowed requests per minute (RPM) well tokens per minute (TPM). Find general information https://platform.openai.com/docs/guides/rate-limits/overview.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"rate_limits_per_minute(   AI_tool = \"CHATGPT\",   model = \"gpt-3.5-turbo-0613\",   api_key = get_api_key() )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"AI_tool Character string specified AI tool api issued. Default \"CHATGPT\" model Character string name completion model. Default = \"gpt-3.5-turbo-16k-0613\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use secret_make_key(), secret_encrypt(), secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"tibble including variables information model used, number requests tokens per minute.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/rate_limits_per_minute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find updated rate limits for API models — rate_limits_per_minute","text":"","code":"if (FALSE) { set_api_key()  rate_limits_per_minute() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a temporary R environment API key variable — set_api_key","title":"Creating a temporary R environment API key variable — set_api_key","text":"function automatically sets/creates interim R environment variable API key call given AI model (e.g. ChatGPT). Thereby users avoid exposing API keys. API key set console, /can revealed via .Rhistory. Find information issue https://httr2.r-lib.org/articles/wrapping-apis.html","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"set_api_key(key, env_var = \"CHATGPT_KEY\")"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a temporary R environment API key variable — set_api_key","text":"key Character string (ideally encrypt) API key. provided returns password box true API key can entered secretly. env_var Character string indicating name temporary R environment variable API key used AI model. Currently, argument takes env_var = \"CHATGPT_KEY\".","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a temporary R environment API key variable — set_api_key","text":"temporary environment variable name env_var. key missing, returns password box true API key can entered.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating a temporary R environment API key variable — set_api_key","text":"set_api_key() successfully executed, get_api_key() automatically retrieves API key R environment users need specify API running functions package call API.","code":""},{"path":[]},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/set_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a temporary R environment API key variable — set_api_key","text":"","code":"if (FALSE) { set_api_key() }"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt_0301.html","id":null,"dir":"Reference","previous_headings":"","what":"Title and abstract screening with ChatGPT (0301 models) — tabscreen_gpt_0301","title":"Title and abstract screening with ChatGPT (0301 models) — tabscreen_gpt_0301","text":"function supports conduct title abstract screening ChatGPT R. function allow run title abstract screening across multiple prompts repeated questions check consistency across answers","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt_0301.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title and abstract screening with ChatGPT (0301 models) — tabscreen_gpt_0301","text":"","code":"tabscreen_gpt_0301(   data,   prompt,   studyid,   title,   abstract,   ...,   arrange_var = studyid,   time_info = TRUE,   token_info = TRUE,   model = \"gpt-3.5-turbo-0301\",   role = \"user\",   api_key = get_api_key(),   max_tries = 2,   max_seconds = NULL,   is_transient = gpt_is_transient,   backoff = NULL,   after = NULL,   rpm = 3500,   reps = 1,   seed = NULL )"},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt_0301.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title and abstract screening with ChatGPT (0301 models) — tabscreen_gpt_0301","text":"data Data title abstracts prompt Prompt(s) paste title abstract studyid ID indication unique ID study. missing, generated automatically. title Name variable containing title information abstract Name variable containing abstract information ... argument pass request body. See https://platform.openai.com/docs/api-reference/chat/create. arrange_var Function indicating variables determing arrangement data. Default studyid. time_info Logical indicating whether run time request/question included data. Default = TRUE. token_info Logical indicating whether total number tokens per request included output data. Default = TRUE. model Character string name completion model. Default = \"gpt-3.5-turbo-0301\". Find available model https://platform.openai.com/docs/models/model-endpoint-compatibility. role Character string indicate role user. Default \"user\". api_key Numerical value personal API key. Find https://platform.openai.com/account/api-keys. Use secret_make_key(), secret_encrypt(), secret_decrypt() scramble decrypt api key use set_api_key() securely automate use api key setting api key locale environment variable. max_tries, max_seconds 'Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), req_perform() retry' (Wickham, 2023). is_transient 'predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error' (Wickham, 2023). backoff 'function takes single argument (number failed attempts far) returns number seconds wait' (Wickham, 2023). 'function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead' (Wickham, 2023). rpm Numerical value indicating number requests per minute (rpm) available specified api key. Find information https://platform.openai.com/docs/guides/rate-limits/---rate-limits---api. Alternatively, use rate_limits_per_minute(). reps Numerical value indicating number times question sent ChatGPT. can useful test consistency answers. Default 1. seed Numerical value seed ensure proper, parallel-safe random numbers produced.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt_0301.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title and abstract screening with ChatGPT (0301 models) — tabscreen_gpt_0301","text":"tibble answer run_time time_info = TRUE.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt_0301.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Title and abstract screening with ChatGPT (0301 models) — tabscreen_gpt_0301","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":""},{"path":"https://mikkelvembye.github.io/AIscreenR/reference/tabscreen_gpt_0301.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title and abstract screening with ChatGPT (0301 models) — tabscreen_gpt_0301","text":"","code":"if (FALSE) { library(future)  # Find your api key at https://platform.openai.com/account/api-keys set_api_key()  data <- load(\"data.RData\") prompts <- paste(\"Prompt\", 1:3)  plan(multisession, workers = 7)  system.time(  test_dat <-   tabscreen_chatgpt(     data = data,     prompt = prompts,     studyid = studyid,     title = Title,     abstract = Abstract  ) ) }"}]
